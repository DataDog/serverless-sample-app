AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Serverless sample app

Parameters:
  DdApiKey:
    Type: String
    NoEcho: true

Resources:
  EntryFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt "LambdaFunctionRole.Arn"
      Code:
        ZipFile: |
          import json, boto3, os

          def handler(event, context):
            sns = boto3.client('sns')
            sns.publish(
              TopicArn=os.environ.get("SNS_TOPIC_ARN"),
              Message='Message sent to SNS'
              )

            return {
                "body": "Sent message to SNS",
                "statusCode": 200
            }
      Runtime: python3.9
      Handler: datadog_lambda.handler.handler
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:464622532012:layer:Datadog-Extension:21
        - !Sub arn:aws:lambda:${AWS::Region}:464622532012:layer:Datadog-Python39:52
      Environment:
        Variables:
          DD_LAMBDA_HANDLER: index.handler
          DD_TRACE_ENABLED: true
          DD_API_KEY: !Ref DdApiKey
          SNS_TOPIC_ARN: !Ref SNSTopic
          DD_CAPTURE_LAMBDA_PAYLOAD: true
          DD_LOG_LEVEL: DEBUG
  SNSTopic:
    Type: AWS::SNS::Topic
  SQSQueue:
    Type: AWS::SQS::Queue
  SQSSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      TopicArn: !Ref SNSTopic
      Endpoint: !GetAtt "SQSQueue.Arn"
      Protocol: sqs
  SNSToSQSPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties: 
      Queues:
        - !Ref SQSQueue
      PolicyDocument: 
        Version: '2012-10-17'
        Statement:
          - Sid: allow-sns-messages
            Effect: Allow
            Principal: '*'
            Resource: !GetAtt SQSQueue.Arn
            Action: SQS:SendMessage
            Condition: 
              ArnEquals:
                aws:SourceArn: !Ref SNSTopic
  SQSConsumerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt "LambdaFunctionRole.Arn"
      Handler: "/opt/nodejs/node_modules/datadog-lambda-js/handler.handler"
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:464622532012:layer:Datadog-Extension:21
        - !Sub arn:aws:lambda:${AWS::Region}:464622532012:layer:Datadog-Node12-x:73
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            console.log(event)
            return {
              "body": "Successfully consumed SQS message",
              "statusCode": 200
            };
          }
      Runtime: nodejs12.x
      Environment:
        Variables:
          DD_LAMBDA_HANDLER: index.handler
          DD_TRACE_ENABLED: true
          DD_API_KEY: !Ref DdApiKey
          DD_CAPTURE_LAMBDA_PAYLOAD: true
          DD_LOG_LEVEL: DEBUG
  LambdaFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      Enabled: true
      EventSourceArn: !GetAtt SQSQueue.Arn
      FunctionName: !GetAtt SQSConsumerFunction.Arn
  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
      Path: /
