# Unless explicitly stated otherwise all files in this repository are licensed
# under the Apache License Version 2.0.
# This product includes software developed at Datadog (https://www.datadoghq.com/).
# Copyright 2022 Datadog, Inc.

AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Datadog Serverless Sample App

Mappings:
  Constants:
    DatadogServerlessSampleApp:
      Version: 0.1.0
Parameters:
  DdApiKey:
    Type: String
    Description: The Datadog API key, which can be found from the APIs page (/account/settings#api).
    NoEcho: true
  DdSite:
    Type: String
    Default: datadoghq.com
    Description: Define your Datadog Site to send data to. Possible values are `datadoghq.com`, `datadoghq.eu`, `us3.datadoghq.com`, `us5.datadoghq.com` and `ddog-gov.com`.
    AllowedPattern: .+
    ConstraintDescription: DdSite is required

Resources:
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: datadog-sample-api-gw
  ApiEntryMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !GetAtt ApiGateway.RootResourceId
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt EntryFunction.Arn
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiEntryMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: datadog-sample-app-stage
  ApiGatewayLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt EntryFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
  EntryFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: datadog-sample-entry-function
      Role: !GetAtt LambdaFunctionRole.Arn
      Code:
        ZipFile: |
          INJECT_ENTRY_FUNCTION_CODE_PLACEHOLDER
      Runtime: python3.9
      Handler: datadog_lambda.handler.handler
      MemorySize: 512
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:464622532012:layer:Datadog-Extension:21
        - !Sub arn:aws:lambda:${AWS::Region}:464622532012:layer:Datadog-Python39:52
      Environment:
        Variables:
          DD_LAMBDA_HANDLER: index.handler
          DD_TRACE_ENABLED: true
          DD_API_KEY: !Ref DdApiKey
          SNS_TOPIC_ARN: !Ref SNSTopic
          DD_CAPTURE_LAMBDA_PAYLOAD: true
          DD_LOG_LEVEL: DEBUG
          DD_SERVICE: datadog-serverless-sample-app
          DD_ENV: dev
          DD_VERSION: 1.0.0
          DD_SITE: !Ref DdSite
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: datadog-sample-sns-topic
  SQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: datadog-sample-sqs-queue
  SQSSubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      TopicArn: !Ref SNSTopic
      Endpoint: !GetAtt SQSQueue.Arn
      Protocol: sqs
  SNSToSQSPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties: 
      Queues:
        - !Ref SQSQueue
      PolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Sid: allow-sns-messages
            Effect: Allow
            Principal: "*"
            Resource: !GetAtt SQSQueue.Arn
            Action: SQS:SendMessage
            Condition: 
              ArnEquals:
                aws:SourceArn: !Ref SNSTopic
  SQSConsumerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: datadog-sample-sqs-consumer-function
      Role: !GetAtt LambdaFunctionRole.Arn
      Handler: "/opt/nodejs/node_modules/datadog-lambda-js/handler.handler"
      MemorySize: 512
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:464622532012:layer:Datadog-Extension:21
        - !Sub arn:aws:lambda:${AWS::Region}:464622532012:layer:Datadog-Node12-x:73
      Code:
        ZipFile: |
          INJECT_SQS_CONSUMER_CODE_PLACEHOLDER
      Runtime: nodejs12.x
      Environment:
        Variables:
          DD_LAMBDA_HANDLER: index.handler
          DD_TRACE_ENABLED: true
          DD_API_KEY: !Ref DdApiKey
          DD_CAPTURE_LAMBDA_PAYLOAD: true
          DD_LOG_LEVEL: DEBUG
          DD_SERVICE: datadog-serverless-sample-app
          DD_ENV: dev
          DD_VERSION: 1.0.0
          DD_SITE: !Ref DdSite
  LambdaFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      Enabled: true
      EventSourceArn: !GetAtt SQSQueue.Arn
      FunctionName: !GetAtt SQSConsumerFunction.Arn
  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
      Policies:
        - PolicyName: DDServerlessSampleAppLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sns:Publish
                Resource:
                  - !GetAtt SQSQueue.Arn
                  - !Ref SNSTopic
Outputs:
  ApiGatewayInvokeURL:
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/datadog-sample-app-stage
  EntryFunctionName:
    Value: !Ref EntryFunction
