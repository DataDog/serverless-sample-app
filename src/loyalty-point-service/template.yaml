#
# Unless explicitly stated otherwise all files in this repository are licensed
# under the Apache License Version 2.0.
# This product includes software developed at Datadog (https://www.datadoghq.com/).
# Copyright 2024 Datadog, Inc.
#

AWSTemplateFormatVersion : '2010-09-09'
Transform: 
  - AWS::Serverless-2016-10-31
  - Name: DatadogServerless
    Parameters:
      stackName: !Ref "AWS::StackName"
      apiKey: !Ref DDApiKey
      nodeLayerVersion: 123
      extensionLayerVersion: 77
      service: !Ref ServiceName
      env: !Ref Env
      version: !Ref CommitHash
      site: !Ref DDSite
      captureLambdaPayload: true
Description: A sample SAM template for deploying Lambda functions.

Conditions:
  IsNonProdEnvironment: !Not [!Equals [!Ref Env, prod]]
  IsIntegratedEnvironment: !Or
    - !Equals [ "dev", !Ref Env ]
    - !Equals [ "prod", !Ref Env ]
  IsNotIntegratedEnvironment: !And
    - !Not [!Equals [!Ref Env, prod]]
    - !Not [!Equals [!Ref Env, dev]]

Parameters: 
  ServiceName: 
    Type: String
    Default: LoyaltyService
  Env: 
    Type: String
    Default: dev
  CommitHash:
    Type: String
    Default: latest
  DDApiKey:
    Type: String
  DDSite:
    Type: String
    Type: String

Globals:
  Function:
    Runtime: nodejs22.x
    Timeout: 29
    MemorySize: 512
    Environment:
      Variables:
        ENV: !Ref Env
        TABLE_NAME: !Ref LoyaltyAccountTable
        POWERTOOLS_SERVICE_NAME: !Ref ServiceName
        POWERTOOLS_LOG_LEVEL: 'INFO'
        DD_LOGS_INJECTION: "true"
        DOMAIN: "products"
    Architectures:
      - x86_64
  Api:
    Cors:
      AllowMethods: "'POST, GET, PUT, DELETE'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"

Resources:
  DDApiKeySecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub "/${Env}/${ServiceName}/datadog-api-key"
      Description: "The Datadog API key"
      SecretString: !Ref DDApiKey

  LoyaltyServiceEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub "${ServiceName}-Bus-${Env}"

  LoyaltyBusNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${Env}/${ServiceName}/event-bus-name
      Type: String
      Value: !Ref LoyaltyServiceEventBus

  LoyaltyBusArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${Env}/${ServiceName}/event-bus-arn
      Type: String
      Value: !GetAtt LoyaltyServiceEventBus.Arn

  LoyaltysSecretAccessKeyParameter:
    Type: AWS::SSM::Parameter
    Condition: IsNotIntegratedEnvironment
    Properties:
      Name: !Sub /${Env}/${ServiceName}/secret-access-key
      Type: String
      Value: "This is a sample secret key that should not be used in production`"
      
################################################
################     API     ###################
################################################

  GetLoyaltyPointsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./out/getLoyaltyAccountFunction/getLoyaltyAccountFunction.zip
      Handler: index.handler
      FunctionName: !Sub GetLoyaltyPointsFunction-${Env}
      Environment:
        Variables:
          EVENT_BUS_NAME: !If
            - IsIntegratedEnvironment
            - !Sub "{{resolve:ssm:/${Env}/shared/event-bus-name:1}}"
            - !Ref LoyaltyServiceEventBus
          JWT_SECRET_PARAM_NAME: !If
            - IsIntegratedEnvironment
            - !Sub /${Env}/shared/secret-access-key
            - !Sub /${Env}/${ServiceName}/secret-access-key
      Events:
        GetProduct:
          Type: Api
          Properties: 
            Path: /loyalty
            Method: get
      Policies:
        - DynamoDBReadPolicy:
            TableName:
              !Ref LoyaltyAccountTable
        - EventBridgePutEventsPolicy:
            EventBusName: !If
              - IsIntegratedEnvironment
              - !Sub "{{resolve:ssm:/${Env}/shared/event-bus-name:1}}"
              - !Ref LoyaltyServiceEventBus
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecret
        # The Datadog extension sends log data to Datadog using the telemetry API, disabling CloudWatch prevents 'double paying' for logs
        - Version: "2012-10-17"
          Statement:
            - Effect: Deny
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "ssm:DescribeParameters"
                - "ssm:GetParameter"
                - "ssm:GetParameterHistory"
                - "ssm:GetParameters"
              Resource: !If
                - IsIntegratedEnvironment
                - !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/shared/secret-access-key"
                - !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/${ServiceName}/secret-access-key"

  SpendLoyaltyPointsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./out/spendLoyaltyPointsFunction/spendLoyaltyPointsFunction.zip
      Handler: index.handler
      FunctionName: !Sub SpendLoyaltyPointsFunction-${Env}
      Environment:
        Variables:
          JWT_SECRET_PARAM_NAME: !If
            - IsIntegratedEnvironment
            - !Sub /${Env}/shared/secret-access-key
            - !Sub /${Env}/${ServiceName}/secret-access-key
          DD_TRACE_DYNAMODB_TABLE_PRIMARY_KEYS: !Sub '{"${LoyaltyAccountTable}": ["PK"]}'
      Events:
        SpendPoints:
          Type: Api
          Properties: 
            Path: /loyalty
            Method: post
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              !Ref LoyaltyAccountTable
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecret
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "ssm:DescribeParameters"
                - "ssm:GetParameter"
                - "ssm:GetParameterHistory"
                - "ssm:GetParameters"
              Resource: !If
                - IsIntegratedEnvironment
                - !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/shared/secret-access-key"
                - !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/${ServiceName}/secret-access-key"

  HandleLoyaltyPointsUpdatedFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./out/handleLoyaltyPointsUpdated/handleLoyaltyPointsUpdated.zip
      Handler: index.handler
      FunctionName: !Sub HandleLoyaltyPointsUpdated-${Env}
      Environment:
        Variables:
          DD_TRACE_DYNAMODB_TABLE_PRIMARY_KEYS: !Sub '{"${LoyaltyAccountTable}": ["PK"]}'
          EVENT_BUS_NAME: !If
              - IsIntegratedEnvironment
              - !Sub "{{resolve:ssm:/${Env}/shared/event-bus-name:1}}"
              - !Ref LoyaltyServiceEventBus
      Events:
        DDBEvent:
          Type: DynamoDB
          Properties:
            Stream: 
              !GetAtt LoyaltyAccountTable.StreamArn   # This must be the name of a DynamoDB table declared in the same template file
            StartingPosition: LATEST
            BatchSize: 5
            Enabled: true
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName: !If
              - IsIntegratedEnvironment
              - !Sub "{{resolve:ssm:/${Env}/shared/event-bus-name:1}}"
              - !Ref LoyaltyServiceEventBus
        - DynamoDBCrudPolicy:
            TableName:
              !Ref LoyaltyAccountTable
        - DynamoDBStreamReadPolicy:
            TableName:
              !Ref LoyaltyAccountTable
            StreamName: "*"
        - EventBridgePutEventsPolicy:
            EventBusName: !If
              - IsIntegratedEnvironment
              - !Sub "{{resolve:ssm:/${Env}/shared/event-bus-name:1}}"
              - !Ref LoyaltyServiceEventBus

################################################
############# Background Workers ###############
################################################

  HandleUserCreatedEventFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./out/handleUserCreatedFunction/handleUserCreatedFunction.zip
      Handler: index.handler
      FunctionName: !Sub HandleUserCreated-${Env}
      Environment:
        Variables:
          DD_TRACE_DYNAMODB_TABLE_PRIMARY_KEYS: !Sub '{"${LoyaltyAccountTable}": ["PK"]}'
      Events:
        UserCreatedQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt UserCreatedQueue.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              !Ref LoyaltyAccountTable
        - EventBridgePutEventsPolicy:
            EventBusName: !If
              - IsIntegratedEnvironment
              - !Sub "{{resolve:ssm:/${Env}/shared/event-bus-name:1}}"
              - !Ref LoyaltyServiceEventBus

  UserCreatedDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${ServiceName}-UserCreatedDLQ-${Env}"

  UserCreatedQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${ServiceName}-UserCreated-${Env}"
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - "UserCreatedDLQ"
            - "Arn"
        maxReceiveCount: 3

  UserCreatedEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref LoyaltyServiceEventBus
      Name: loyalty-user-created
      State: ENABLED
      EventPattern:
        source:
          - !Sub "${Env}.users"
        detail-type:
          - "users.userCreated.v1"
      Targets:
        - Id: UserCreatedQueue
          Arn: !GetAtt UserCreatedQueue.Arn

  EBToUserCreatedQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref UserCreatedQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: allow-eb-send-message
            Effect: Allow
            Principal:
              Service: "events.amazonaws.com"
            Resource: !GetAtt UserCreatedQueue.Arn
            Action: SQS:SendMessage

  HandleOrderCompletedEventFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./out/handleOrderCompletedFunction/handleOrderCompletedFunction.zip
      Handler: index.handler
      FunctionName: !Sub HandleOrderCompleted-${Env}
      Environment:
        Variables:
          DD_TRACE_DYNAMODB_TABLE_PRIMARY_KEYS: !Sub '{"${LoyaltyAccountTable}": ["PK"]}'
      Events:
        OrderCompletedQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt OrderCompletedQueue.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              !Ref LoyaltyAccountTable

  OrderCompletedDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${ServiceName}-OrderCompletedDLQ-${Env}"

  OrderCompletedQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${ServiceName}-OrderCompleted-${Env}"
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - "OrderCompletedDLQ"
            - "Arn"
        maxReceiveCount: 3

  OrderCompletedEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref LoyaltyServiceEventBus
      Name: loyalty-order-completed
      State: ENABLED
      EventPattern:
        source:
          - !Sub "${Env}.orders"
        detail-type:
          - "orders.orderCompleted.v1"
      Targets:
        - Id: OrderCompletedQueue
          Arn: !GetAtt OrderCompletedQueue.Arn

  EBToOrderCompletedQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref OrderCompletedQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: allow-eb-send-message
            Effect: Allow
            Principal:
              Service: "events.amazonaws.com"
            Resource: !GetAtt OrderCompletedQueue.Arn
            Action: SQS:SendMessage

################################################
######## Public Event Subscriptions ############
################################################
  SharedEventBusToLoyaltyServiceEventBusRole:
    Type: AWS::IAM::Role
    Condition: IsIntegratedEnvironment
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: allow-eb-publish
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "events:PutEvents"
                Resource: [!GetAtt LoyaltyServiceEventBus.Arn]

  SharedEventBusUserCreatedEventRule:
    Type: AWS::Events::Rule
    Condition: IsIntegratedEnvironment
    Properties:
      EventBusName: !Sub "{{resolve:ssm:/${Env}/shared/event-bus-name:1}}"
      Name: shared-loyalty-user-created
      State: ENABLED
      EventPattern:
        source:
          - !Sub "${Env}.users"
        detail-type:
          - "users.userCreated.v1"
      Targets:
        - Id: LoyaltyServiceEventBus
          Arn: !GetAtt LoyaltyServiceEventBus.Arn
          RoleArn: !GetAtt SharedEventBusToLoyaltyServiceEventBusRole.Arn
          
  SharedEventBusOrderCompletedEventRule:
    Type: AWS::Events::Rule
    Condition: IsIntegratedEnvironment
    Properties:
      EventBusName: !Sub "{{resolve:ssm:/${Env}/shared/event-bus-name:1}}"
      Name: shared-loyalty-order-completed
      State: ENABLED
      EventPattern:
        source:
          - !Sub "${Env}.orders"
        detail-type:
          - "orders.orderCompleted.v1"
      Targets:
        - Id: LoyaltyServiceEventBus
          Arn: !GetAtt LoyaltyServiceEventBus.Arn
          RoleArn: !GetAtt SharedEventBusToLoyaltyServiceEventBusRole.Arn

  LoyaltyAccountTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${ServiceName}-Accounts-${Env}
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
      StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

  ApiEndpoint:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${Env}/${ServiceName}/api-endpoint
      Type: String
      Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"