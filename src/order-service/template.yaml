#
# Unless explicitly stated otherwise all files in this repository are licensed
# under the Apache License Version 2.0.
# This product includes software developed at Datadog (https://www.datadoghq.com/).
# Copyright 2024 Datadog, Inc.
#

AWSTemplateFormatVersion: "2010-09-09"
Transform:
  - AWS::Serverless-2016-10-31
  - Name: DatadogServerless
    Parameters:
      stackName: !Ref "AWS::StackName"
      apiKey: !Ref DDApiKey
      dotnetLayerVersion: "20"
      extensionLayerVersion: "80"
      service: !Ref ServiceName
      env: !Ref Env
      version: !Ref CommitHash
      site: !Ref DDSite
      captureLambdaPayload: true
Description: A sample SAM template for deploying Lambda functions.

Conditions:
  IsNonProdEnvironment: !Not [!Equals [!Ref Env, prod]]
  IsIntegratedEnvironment: !Or
    - !Equals ["dev", !Ref Env]
    - !Equals ["prod", !Ref Env]
  IsNotIntegratedEnvironment: !And
    - !Not [!Equals [!Ref Env, prod]]
    - !Not [!Equals [!Ref Env, dev]]

Parameters:
  ServiceName:
    Type: String
    Default: OrdersService
  Env:
    Type: String
    Default: dev
  CommitHash:
    Type: String
    Default: latest
  DDSite:
    Type: String
  DDApiKey:
    Type: String

Globals:
  Function:
    Runtime: dotnet8
    Timeout: 29
    MemorySize: 2048
    Environment:
      Variables:
        TEAM: "orders"
        DOMAIN: "orders"
        ENV: !Ref Env
        DD_LOGS_INJECTION: "true"
        POWERTOOLS_SERVICE_NAME: !Ref ServiceName
        POWERTOOLS_LOG_LEVEL: "INFO"
        AWS_LAMBDA_EXEC_WRAPPER: /opt/datadog_wrapper
        DD_DATA_STREAMS_ENABLED: "true"
        DD_TRACE_REMOVE_INTEGRATION_SERVICE_NAMES_ENABLED: "true"
    Architectures:
      - x86_64

Resources:
  DDApiKeySecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: !Sub "/${Env}/${ServiceName}/datadog-api-key"
      Description: "The Datadog API key"
      SecretString: !Ref DDApiKey

  OrdersServiceEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub "${ServiceName}-Bus-${Env}"

  OrdersBusNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${Env}/${ServiceName}/event-bus-name
      Type: String
      Value: !Ref OrdersServiceEventBus

  OrdersBusArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${Env}/${ServiceName}/event-bus-arn
      Type: String
      Value: !GetAtt OrdersServiceEventBus.Arn

  OrdersSecretAccessKeyParameter:
    Type: AWS::SSM::Parameter
    Condition: IsNotIntegratedEnvironment
    Properties:
      Name: !Sub /${Env}/${ServiceName}/secret-access-key
      Type: String
      Value: "This is a sample secret key that should not be used in production`"

  OrderWorkflowLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 1
      LogGroupName: !Sub "/aws/vendedlogs/states/${ServiceName}-OrderWorkflow-${Env}-Logs"

  OrderWorkflow:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub "${ServiceName}-OrderWorkflow-${Env}"
      DefinitionUri: cdk/workflows/orderProcessingWorkflow.asl.json
      DefinitionSubstitutions:
        EventBusName: !If
          - IsIntegratedEnvironment
          - !Sub "{{resolve:ssm:/${Env}/shared/event-bus-name:1}}"
          - !Ref OrdersServiceEventBus
        TableName: !Ref OrdersTable
        Env: !Ref Env
        ConfirmOrderLambda: !GetAtt ConfirmOrderHandler.Arn
        NoStockLambda: !GetAtt NoStockHandler.Arn
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "logs:CreateLogDelivery"
                - "logs:CreateLogStream"
                - "logs:GetLogDelivery"
                - "logs:UpdateLogDelivery"
                - "logs:DeleteLogDelivery"
                - "logs:ListLogDeliveries"
                - "logs:PutLogEvents"
                - "logs:PutResourcePolicy"
                - "logs:DescribeResourcePolicies"
                - "logs:DescribeLogGroups"
              Resource: "*"
        - DynamoDBCrudPolicy:
            TableName: !Ref OrdersTable
        - EventBridgePutEventsPolicy:
            EventBusName: !If
              - IsIntegratedEnvironment
              - !Sub "{{resolve:ssm:/${Env}/shared/event-bus-name:1}}"
              - !Ref OrdersServiceEventBus
        - LambdaInvokePolicy:
            FunctionName: !Ref ConfirmOrderHandler
        - LambdaInvokePolicy:
            FunctionName: !Ref NoStockHandler
      Logging:
        IncludeExecutionData: true
        Level: ALL
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt OrderWorkflowLogGroup.Arn
      Tags:
        DD_ENHANCED_METRICS: "true"
        DD_TRACE_ENABLED: "true"
        env: !Ref Env
        service: !Ref ServiceName
        version: !Ref CommitHash

  HandleInventoryStockReserved:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/Orders.BackgroundWorkers
      Handler: Orders.BackgroundWorkers::Orders.BackgroundWorkers.Functions_HandleStockReserved_Generated::HandleStockReserved
      FunctionName: !Sub ${ServiceName}-StockReservationSuccessACL-${Env}
      Environment:
        Variables:
          EVENT_BUS_NAME: !If
            - IsIntegratedEnvironment
            - !Sub "{{resolve:ssm:/${Env}/shared/event-bus-name:1}}"
            - !Ref OrdersServiceEventBus
          TABLE_NAME: !Ref OrdersTable
      Events:
        StockReservedQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt OrdersStockReservedQueue.Arn
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecret
        # The Datadog extension sends log data to Datadog using the telemetry API, disabling CloudWatch prevents 'double paying' for logs
        - Version: "2012-10-17"
          Statement:
            - Effect: Deny
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - states:SendTaskSuccess
              Resource: !GetAtt OrderWorkflow.Arn
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - events:DescribeEventBus
              Resource: !If
                - IsIntegratedEnvironment
                - !Sub "{{resolve:ssm:/${Env}/shared/event-bus-arn:1}}"
                - !GetAtt OrdersServiceEventBus.Arn
        - EventBridgePutEventsPolicy:
            EventBusName: !If
              - IsIntegratedEnvironment
              - !Sub "{{resolve:ssm:/${Env}/shared/event-bus-name:1}}"
              - !Ref OrdersServiceEventBus
        - DynamoDBCrudPolicy:
            TableName: !Ref OrdersTable
  HandleInventoryStockReservationFailed:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/Orders.BackgroundWorkers
      Handler: Orders.BackgroundWorkers::Orders.BackgroundWorkers.Functions_HandleReservationFailed_Generated::HandleReservationFailed
      FunctionName: !Sub ${ServiceName}-StockReservationFailedACL-${Env}
      Environment:
        Variables:
          EVENT_BUS_NAME: !If
            - IsIntegratedEnvironment
            - !Sub "{{resolve:ssm:/${Env}/shared/event-bus-name:1}}"
            - !Ref OrdersServiceEventBus
          TABLE_NAME: !Ref OrdersTable
      Events:
        StockReservationFailedQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt StockReservationFailedQueue.Arn
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecret
        # The Datadog extension sends log data to Datadog using the telemetry API, disabling CloudWatch prevents 'double paying' for logs
        - Version: "2012-10-17"
          Statement:
            - Effect: Deny
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - states:SendTaskFailure
              Resource: !GetAtt OrderWorkflow.Arn
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - events:DescribeEventBus
              Resource: !If
                - IsIntegratedEnvironment
                - !Sub "{{resolve:ssm:/${Env}/shared/event-bus-arn:1}}"
                - !GetAtt OrdersServiceEventBus.Arn
        - EventBridgePutEventsPolicy:
            EventBusName: !If
              - IsIntegratedEnvironment
              - !Sub "{{resolve:ssm:/${Env}/shared/event-bus-name:1}}"
              - !Ref OrdersServiceEventBus
        - DynamoDBCrudPolicy:
            TableName: !Ref OrdersTable
  ConfirmOrderHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/Orders.BackgroundWorkers
      Handler: Orders.BackgroundWorkers::Orders.BackgroundWorkers.WorkflowHandlers_ReservationSuccess_Generated::ReservationSuccess
      FunctionName: !Sub ${ServiceName}-ConfirmOrderHandler-${Env}
      Environment:
        Variables:
          EVENT_BUS_NAME: !If
            - IsIntegratedEnvironment
            - !Sub "{{resolve:ssm:/${Env}/shared/event-bus-name:1}}"
            - !Ref OrdersServiceEventBus
          TABLE_NAME: !Ref OrdersTable
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecret
        # The Datadog extension sends log data to Datadog using the telemetry API, disabling CloudWatch prevents 'double paying' for logs
        - Version: "2012-10-17"
          Statement:
            - Effect: Deny
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - events:DescribeEventBus
              Resource: !If
                - IsIntegratedEnvironment
                - !Sub "{{resolve:ssm:/${Env}/shared/event-bus-arn:1}}"
                - !GetAtt OrdersServiceEventBus.Arn
        - EventBridgePutEventsPolicy:
            EventBusName: !If
              - IsIntegratedEnvironment
              - !Sub "{{resolve:ssm:/${Env}/shared/event-bus-name:1}}"
              - !Ref OrdersServiceEventBus
        - DynamoDBCrudPolicy:
            TableName: !Ref OrdersTable

  NoStockHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/Orders.BackgroundWorkers
      Handler: Orders.BackgroundWorkers::Orders.BackgroundWorkers.WorkflowHandlers_ReservationFailed_Generated::ReservationFailed
      FunctionName: !Sub ${ServiceName}-NoStockHandler-${Env}
      Environment:
        Variables:
          EVENT_BUS_NAME: !If
            - IsIntegratedEnvironment
            - !Sub "{{resolve:ssm:/${Env}/shared/event-bus-name:1}}"
            - !Ref OrdersServiceEventBus
          TABLE_NAME: !Ref OrdersTable
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecret
        # The Datadog extension sends log data to Datadog using the telemetry API, disabling CloudWatch prevents 'double paying' for logs
        - Version: "2012-10-17"
          Statement:
            - Effect: Deny
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - events:DescribeEventBus
              Resource: !If
                - IsIntegratedEnvironment
                - !Sub "{{resolve:ssm:/${Env}/shared/event-bus-arn:1}}"
                - !GetAtt OrdersServiceEventBus.Arn
        - EventBridgePutEventsPolicy:
            EventBusName: !If
              - IsIntegratedEnvironment
              - !Sub "{{resolve:ssm:/${Env}/shared/event-bus-name:1}}"
              - !Ref OrdersServiceEventBus
        - DynamoDBCrudPolicy:
            TableName: !Ref OrdersTable

  OrdersStockReservedDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "OrdersStockReservedDLQ-${Env}"

  OrdersStockReservedQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "OrdersStockReservedQueue-${Env}"
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - "OrdersStockReservedDLQ"
            - "Arn"
        maxReceiveCount: 3

  StockReservedEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref OrdersServiceEventBus
      Name: orders-stock-reserved
      State: ENABLED
      EventPattern:
        source:
          - !Sub "${Env}.inventory"
        detail-type:
          - "inventory.stockReserved.v1"
      Targets:
        - Id: OrdersStockReservedQueue
          Arn: !GetAtt OrdersStockReservedQueue.Arn

  EBToStockReservedQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref OrdersStockReservedQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: allow-eb-send-message-messages
            Effect: Allow
            Principal:
              Service: "events.amazonaws.com"
            Resource: !GetAtt OrdersStockReservedQueue.Arn
            Action: SQS:SendMessage

  StockReservationFailedDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "OrdersStockReservationFailedDLQ-${Env}"

  StockReservationFailedQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "OrdersStockReservationFailed-${Env}"
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - "StockReservationFailedDLQ"
            - "Arn"
        maxReceiveCount: 3

  StockReservationFailedEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref OrdersServiceEventBus
      Name: orders-stock-reservation-failed
      State: ENABLED
      EventPattern:
        source:
          - !Sub "${Env}.inventory"
        detail-type:
          - "inventory.stockReservationFailed.v1"
      Targets:
        - Id: StockReservationFailedQueue
          Arn: !GetAtt StockReservationFailedQueue.Arn

  EBToStockReservationFailedQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref StockReservationFailedQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: allow-eb-send-message-messages
            Effect: Allow
            Principal:
              Service: "events.amazonaws.com"
            Resource: !GetAtt StockReservationFailedQueue.Arn
            Action: SQS:SendMessage
  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${ServiceName}-Orders-${Env}
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: "GSI1"
          KeySchema:
            - AttributeName: "GSI1PK"
              KeyType: "HASH"
            - AttributeName: "GSI1SK"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"

  ################################################
  #################### API #######################
  ################################################
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow incoming HTTP traffic
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80

  MicroServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow incoming HTTP traffic
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          Description: Allow incoming HTTP traffic from ALB
        - CidrIpv6: ::/0
          IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          Description: Allow incoming HTTP traffic from ALB

  ALBToServiceSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt MicroServiceSecurityGroup.GroupId
      Description: Allow traffic from ALB to service
      SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
      FromPort: 0
      ToPort: 65535
      IpProtocol: tcp

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${ServiceName}-cluster-${Env}

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      TaskDefinition: !Ref ECSTaskDef
      LaunchType: FARGATE
      ServiceName: orders-api
      SchedulingStrategy: REPLICA
      LoadBalancers:
        - ContainerName: OrderApi
          ContainerPort: 8080
          TargetGroupArn: !Ref ECSALBTargetGroup
      HealthCheckGracePeriodSeconds: 29
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref MicroServiceSecurityGroup
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
      PlatformVersion: LATEST
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DeploymentController:
        Type: ECS
      ServiceConnectConfiguration:
        Enabled: false
      Tags: []
      EnableECSManagedTags: true
    DependsOn:
      - ALBListener

  ECSALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ServiceName}-tg-${Env}
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      Matcher:
        HttpCode: 200-499
      HealthCheckPath: /health
      HealthCheckPort: "traffic-port"
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      HealthCheckTimeoutSeconds: 30
      HealthCheckIntervalSeconds: 60
      VpcId: !Ref VPC

  ECSALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${ServiceName}-api-${Env}
      Type: application
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ECSALBTargetGroup
      LoadBalancerArn: !Ref ECSALB
      Port: 80
      Protocol: HTTP

  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ecs-service-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: cloudwatch-logs-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: "*"
        - PolicyName: allow-secrets-retrieve
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref DDApiKeySecret

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: dynamo-db-crud
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:BatchWriteItem"
                  - "dynamodb:ConditionCheckItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:DescribeTable"
                  - "dynamodb:GetItem"
                  - "dynamodb:GetRecords"
                  - "dynamodb:GetShardIterator"
                  - "dynamodb:PutItem"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:UpdateItem"
                Resource:
                  - !GetAtt OrdersTable.Arn
                  - !Sub "${OrdersTable.Arn}/*"
        - PolicyName: allow-eb-publish
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "events:PutEvents"
                  - "events:DescribeEventBus"
                Resource: !If
                  - IsIntegratedEnvironment
                  - !Sub "{{resolve:ssm:/${Env}/shared/event-bus-arn:1}}"
                  - !GetAtt OrdersServiceEventBus.Arn
        - PolicyName: allow-secrets-retrieve
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref DDApiKeySecret
        - PolicyName: allow-ssm-access-key-retrieve
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ssm:DescribeParameters"
                  - "ssm:GetParameter"
                  - "ssm:GetParameterHistory"
                  - "ssm:GetParameters"
                Resource: !If
                  - IsIntegratedEnvironment
                  - !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/shared/secret-access-key"
                  - !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/${ServiceName}/secret-access-key"
        - PolicyName: allow-start-workflow
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "states:StartExecution"
                Resource: !GetAtt OrderWorkflow.Arn

  ECSTaskDef:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - FARGATE
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      Family: order-api-definition
      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      ContainerDefinitions:
        - Name: OrderApi
          Image: public.ecr.aws/k4y9x2e7/dd-serverless-sample-app-dotnet:latest
          Environment:
            - Name: TABLE_NAME
              Value: !Ref OrdersTable
            - Name: EVENT_BUS_NAME
              Value: !If
                - IsIntegratedEnvironment
                - !Sub "{{resolve:ssm:/${Env}/shared/event-bus-name:1}}"
                - !Ref OrdersServiceEventBus
            - Name: ORDER_WORKFLOW_ARN
              Value: !GetAtt OrderWorkflow.Arn
            - Name: JWT_SECRET_PARAM_NAME
              Value: !If
                - IsIntegratedEnvironment
                - !Sub /${Env}/shared/secret-access-key
                - !Sub /${Env}/${ServiceName}/secret-access-key
            - Name: TEAM
              Value: "orders"
            - Name: DOMAIN
              Value: "orders"
            - Name: ENV
              Value: !Ref Env

            - Name: DD_LOGS_INJECTION
              Value: "true"
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
              HostPort: 8080
              AppProtocol: http
              Name: order-api
          Essential: true
          LogConfiguration:
            LogDriver: awsfirelens
            Options:
              Name: "datadog"
              Host: !Sub "http-intake.logs.${DDSite}"
              TLS: "on"
              dd_service: !Ref ServiceName
              dd_source: "quarkus"
              dd_message_key: "log"
              provider: "ecs"
              apikey: !Ref DDApiKey
        - Name: DatadogAgent
          Image: public.ecr.aws/datadog/agent:latest
          Environment:
            - Name: DD_SITE
              Value: !Ref DDSite
            - Name: ECS_FARGATE
              Value: "true"
            - Name: DD_LOGS_ENABLED
              Value: "false"
            - Name: DD_PROCESS_AGENT_ENABLED
              Value: "true"
            - Name: DD_APM_ENABLED
              Value: "true"
            - Name: DD_APM_NON_LOCAL_TRAFFIC
              Value: "true"
            - Name: DD_DOGSTATSD_NON_LOCAL_TRAFFIC
              Value: "true"
            - Name: DD_ECS_TASK_COLLECTION_ENABLED
              Value: "true"
            - Name: DD_ENV
              Value: !Ref Env
            - Name: DD_SERVICE
              Value: !Ref ServiceName
            - Name: DD_VERSION
              Value: !Ref CommitHash
            - Name: DD_APM_IGNORE_RESOURCES
              Value: "GET /"
          Secrets:
            - Name: DD_API_KEY
              ValueFrom: !Ref DDApiKeySecret
          PortMappings:
            - ContainerPort: 8125
              HostPort: 8125
            - ContainerPort: 8126
              HostPort: 8126
          Essential: true
        - Name: LogRouter
          Image: amazon/aws-for-fluent-bit:latest
          Essential: true
          FirelensConfiguration:
            Type: fluentbit
            Options:
              enable-ecs-log-metadata: "true"

  ################################################
  ######## Public Event Subscriptions ############
  ################################################
  SharedEventBusToOrdersServiceEventBusRole:
    Type: AWS::IAM::Role
    Condition: IsIntegratedEnvironment
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: allow-eb-publish
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "events:PutEvents"
                Resource: [!GetAtt OrdersServiceEventBus.Arn]

  SharedEventBusStockReservedEventRule:
    Type: AWS::Events::Rule
    Condition: IsIntegratedEnvironment
    Properties:
      EventBusName: !Sub "{{resolve:ssm:/${Env}/shared/event-bus-name:1}}"
      Name: shared-orders-stock-reserved
      State: ENABLED
      EventPattern:
        source:
          - !Sub "${Env}.inventory"
        detail-type:
          - "inventory.stockReserved.v1"
      Targets:
        - Id: OrdersServiceEventBus
          Arn: !GetAtt OrdersServiceEventBus.Arn
          RoleArn: !GetAtt SharedEventBusToOrdersServiceEventBusRole.Arn

  SharedEventBusStockReservationFailedEventRule:
    Type: AWS::Events::Rule
    Condition: IsIntegratedEnvironment
    Properties:
      EventBusName: !Sub "{{resolve:ssm:/${Env}/shared/event-bus-name:1}}"
      Name: shared-orders-stock-reservation-failed
      State: ENABLED
      EventPattern:
        source:
          - !Sub "${Env}.inventory"
        detail-type:
          - "inventory.stockReservationFailed.v1"
      Targets:
        - Id: OrdersServiceEventBus
          Arn: !GetAtt OrdersServiceEventBus.Arn
          RoleArn: !GetAtt SharedEventBusToOrdersServiceEventBusRole.Arn

  OrderApiEndpoint:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${Env}/${ServiceName}/api-endpoint
      Type: String
      Value: !Sub "http://${ECSALB.DNSName}"

  #################################################
  ############ Deploy Test Harness ################
  #################################################
  SharedEventBusOrderCreatedEventRule:
    Type: AWS::Events::Rule
    Condition: IsIntegratedEnvironment
    Properties:
      EventBusName: !Sub "{{resolve:ssm:/${Env}/shared/event-bus-name:1}}"
      Name: shared-orders-order-created
      State: ENABLED
      EventPattern:
        source:
          - !Sub "${Env}.orders"
        detail-type:
          - "orders.orderCreated.v1"
      Targets:
        - Id: OrdersServiceEventBus
          Arn: !GetAtt OrdersServiceEventBus.Arn
          RoleArn: !GetAtt SharedEventBusToOrdersServiceEventBusRole.Arn

  SharedEventBusOrderConfirmedEventRule:
    Type: AWS::Events::Rule
    Condition: IsIntegratedEnvironment
    Properties:
      EventBusName: !Sub "{{resolve:ssm:/${Env}/shared/event-bus-name:1}}"
      Name: shared-orders-order-confirmed
      State: ENABLED
      EventPattern:
        source:
          - !Sub "${Env}.orders"
        detail-type:
          - "orders.orderConfirmed.v1"
      Targets:
        - Id: OrdersServiceEventBus
          Arn: !GetAtt OrdersServiceEventBus.Arn
          RoleArn: !GetAtt SharedEventBusToOrdersServiceEventBusRole.Arn

  SharedEventBusOrderCompletedEventRule:
    Type: AWS::Events::Rule
    Condition: IsIntegratedEnvironment
    Properties:
      EventBusName: !Sub "{{resolve:ssm:/${Env}/shared/event-bus-name:1}}"
      Name: shared-orders-order-completed
      State: ENABLED
      EventPattern:
        source:
          - !Sub "${Env}.orders"
        detail-type:
          - "orders.orderCompleted.v1"
      Targets:
        - Id: OrdersServiceEventBus
          Arn: !GetAtt OrdersServiceEventBus.Arn
          RoleArn: !GetAtt SharedEventBusToOrdersServiceEventBusRole.Arn

  TestHarnessTable:
    Type: AWS::DynamoDB::Table
    Condition: IsNonProdEnvironment
    Properties:
      TableName: !Sub ${ServiceName}-EventTestHarness-${Env}
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE

  EventTestHarnessAPI:
    Type: AWS::Serverless::Function
    Condition: IsNonProdEnvironment
    Properties:
      CodeUri: ./src/TestHarness/TestHarness.Lambda
      Handler: TestHarness.Lambda::TestHarness.Lambda.ApiFunctions_GetReceivedEvents_Generated::GetReceivedEvents
      FunctionName: !Sub ${ServiceName}-TestHarnessGetEvents-${Env}
      Environment:
        Variables:
          TABLE_NAME: !Ref TestHarnessTable
          KEY_PROPERTY_NAME: "orderNumber"
          DD_SERVICE: !Sub "${ServiceName}-TestHarness"
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/events/{eventId}"
            Method: "GET"
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecret
        - DynamoDBCrudPolicy:
            TableName: !Ref TestHarnessTable

  EventBridgeEventTestHarness:
    Type: AWS::Serverless::Function
    Condition: IsNonProdEnvironment
    Properties:
      CodeUri: ./src/TestHarness/TestHarness.Lambda
      Handler: TestHarness.Lambda::TestHarness.Lambda.HandlerFunctions_HandleEventBridge_Generated::HandleEventBridge
      FunctionName: !Sub ${ServiceName}-TestHarnessEventBridge-${Env}
      Environment:
        Variables:
          TABLE_NAME: !Ref TestHarnessTable
          KEY_PROPERTY_NAME: "orderNumber"
          DD_SERVICE: !Sub "${ServiceName}-TestHarness"
      Events:
        OrderCreated:
          Type: CloudWatchEvent
          Properties:
            EventBusName: !Ref OrdersServiceEventBus
            Pattern:
              source:
                - !Sub "${Env}.orders"
              detail-type:
                - "orders.orderCreated.v1"
        OrderConfirmed:
          Type: CloudWatchEvent
          Properties:
            EventBusName: !Ref OrdersServiceEventBus
            Pattern:
              source:
                - !Sub "${Env}.orders"
              detail-type:
                - "orders.orderConfirmed.v1"
        OrderCompleted:
          Type: CloudWatchEvent
          Properties:
            EventBusName: !Ref OrdersServiceEventBus
            Pattern:
              source:
                - !Sub "${Env}.orders"
              detail-type:
                - "orders.orderCompleted.v1"
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecret
        - DynamoDBCrudPolicy:
            TableName: !Ref TestHarnessTable

  TestHarnessApiEndpoint:
    Type: AWS::SSM::Parameter
    Condition: IsNonProdEnvironment
    Properties:
      Name: !Sub /${Env}/${ServiceName}_TestHarness/api-endpoint
      Type: String
      Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
