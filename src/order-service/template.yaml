#
# Unless explicitly stated otherwise all files in this repository are licensed
# under the Apache License Version 2.0.
# This product includes software developed at Datadog (https://www.datadoghq.com/).
# Copyright 2024 Datadog, Inc.
#

AWSTemplateFormatVersion: "2010-09-09"
Transform:
  - AWS::Serverless-2016-10-31
  - Name: DatadogServerless
    Parameters:
      stackName: !Ref "AWS::StackName"
      apiKeySecretArn: !Ref DDApiKeySecretArn
      dotnetLayerVersion: "18"
      extensionLayerVersion: "71"
      service: !Ref ServiceName
      env: !Ref Env
      version: !Ref CommitHash
      site: !Ref DDSite
      captureLambdaPayload: true
Description: A sample SAM template for deploying Lambda functions.

Parameters:
  ServiceName:
    Type: String
    Default: OrdersService
  Env:
    Type: String
    Default: dev
  CommitHash:
    Type: String
    Default: latest
  DDApiKeySecretArn:
    Type: String
  DDSite:
    Type: String

Globals:
  Function:
    Runtime: dotnet8
    Timeout: 29
    MemorySize: 2048
    Environment:
      Variables:
        ENV: !Ref Env
        DD_LOGS_INJECTION: "true"
        POWERTOOLS_SERVICE_NAME: !Ref ServiceName
        POWERTOOLS_LOG_LEVEL: 'INFO'
        AWS_LAMBDA_EXEC_WRAPPER: /opt/datadog_wrapper
    Architectures:
      - x86_64

Resources:
  OrderCreatedEventGatewayHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/Orders.BackgroundWorkers
      Handler: Orders.BackgroundWorkers::Orders.BackgroundWorkers.Functions_HandleOrderCreated_Generated::HandleOrderCreated
      FunctionName: !Sub ${ServiceName}-OrderCreatedEventGateway-${Env}
      Environment:
        Variables:
          EVENT_BUS_NAME: !Sub "{{resolve:ssm:/${Env}/shared/event-bus-name:1}}"
          TABLE_NAME: !Ref OrdersTable
          PRODUCT_API_ENDPOINT_PARAMETER: !Sub "/${Env}/ProductManagementService/api-endpoint"
      Events:
        OrderCreatedTopic:
          Type: SNS
          Properties:
            Topic: !GetAtt OrderCreatedTopic.TopicArn
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecretArn
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - events:DescribeEventBus
              Resource: !Sub "{{resolve:ssm:/${Env}/shared/event-bus-arn:1}}"
        - EventBridgePutEventsPolicy:
            EventBusName: !Sub "{{resolve:ssm:/${Env}/shared/event-bus-name:1}}"
        - DynamoDBCrudPolicy:
            TableName: !Ref OrdersTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub "/${Env}/ProductManagementService/api-endpoint"
  
  OrderCreatedTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${ServiceName}-OrderCreated-${Env}"

  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${ServiceName}-Orders-${Env}
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: "GSI"
          KeySchema:
            - AttributeName: "GSI1PK"
              KeyType: "HASH"
            - AttributeName: "GSI1SK"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
  
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
  
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [1, !GetAZs '']

  InternetGateway:
    Type: AWS::EC2::InternetGateway
  
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow incoming HTTP traffic
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80

  MicroServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow incoming HTTP traffic
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          Description: Allow incoming HTTP traffic from ALB
        - CidrIpv6: ::/0
          IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          Description: Allow incoming HTTP traffic from ALB

  ALBToServiceSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt MicroServiceSecurityGroup.GroupId
      Description: Allow traffic from ALB to service
      SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
      FromPort: 0
      ToPort: 65535
      IpProtocol: tcp

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${ServiceName}-cluster-${Env}

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      TaskDefinition: !Ref ECSTaskDef
      LaunchType: FARGATE
      ServiceName: orders-api
      SchedulingStrategy: REPLICA
      LoadBalancers:
        - ContainerName: OrderApi
          ContainerPort: 8080
          TargetGroupArn: !Ref ECSALBTargetGroup
      HealthCheckGracePeriodSeconds: 29
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref MicroServiceSecurityGroup
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
      PlatformVersion: LATEST
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DeploymentController:
        Type: ECS
      ServiceConnectConfiguration:
        Enabled: false
      Tags: []
      EnableECSManagedTags: true
    DependsOn:
      - ALBListener
  
  ECSALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ServiceName}-tg-${Env}
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      Matcher:
        HttpCode: 200-499
      HealthCheckPath: /health
      HealthCheckPort: "traffic-port"
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      HealthCheckTimeoutSeconds: 30
      HealthCheckIntervalSeconds: 60
      VpcId: !Ref VPC

  ECSALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${ServiceName}-api-${Env}
      Type: application
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
  
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ECSALBTargetGroup
      LoadBalancerArn: !Ref ECSALB
      Port: 80
      Protocol: HTTP

  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ecs-service-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: cloudwatch-logs-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: "*"
        - PolicyName: allow-secrets-retrieve
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref DDApiKeySecretArn

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: dynamo-db-crud
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:BatchWriteItem"
                  - "dynamodb:ConditionCheckItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:DescribeTable"
                  - "dynamodb:GetItem"
                  - "dynamodb:GetRecords"
                  - "dynamodb:GetShardIterator"
                  - "dynamodb:PutItem"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:UpdateItem"
                Resource: !GetAtt OrdersTable.Arn
        - PolicyName: allow-eb-publish
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "events:PutEvents"
                  - "events:DescribeEventBus"
                Resource: !Sub "{{resolve:ssm:/${Env}/shared/event-bus-arn:1}}"
        - PolicyName: allow-secrets-retrieve
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref DDApiKeySecretArn
        - PolicyName: allow-ssm-access-key-retrieve
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ssm:DescribeParameters"
                  - "ssm:GetParameter"
                  - "ssm:GetParameterHistory"
                  - "ssm:GetParameters"
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/shared/secret-access-key"
        - PolicyName: allow-product-api-endpoint-retrieve
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ssm:DescribeParameters"
                  - "ssm:GetParameter"
                  - "ssm:GetParameterHistory"
                  - "ssm:GetParameters"
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/ProductManagementService/api-endpoint"

  ECSTaskDef:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - FARGATE
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      Family: order-api-definition
      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      RuntimePlatform:
        CpuArchitecture: ARM64
        OperatingSystemFamily: LINUX
      ContainerDefinitions:
        - Name: OrderApi
          Image: public.ecr.aws/k4y9x2e7/dd-serverless-sample-app-dotnet:latest
          Environment:
            -
              Name: TABLE_NAME
              Value: !Ref OrdersTable
            -
              Name: EVENT_BUS_NAME
              Value: !Sub "{{resolve:ssm:/${Env}/shared/event-bus-name:1}}"
            -
              Name: JWT_SECRET_PARAM_NAME
              Value: !Sub "/${Env}/shared/secret-access-key"
            -
              Name: PRODUCT_API_ENDPOINT_PARAMETER
              Value: !Sub "/${Env}/ProductManagementService/api-endpoint"
            -
              Name: TEAM
              Value: "orders"
            -
              Name: DOMAIN
              Value: "orders"
            -
              Name: ENV
              Value: !Ref Env
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
              HostPort: 8080
              AppProtocol: http
              Name: order-api
          Essential: true
          LogConfiguration:
            LogDriver: awsfirelens
            Options:
              Name: "datadog"
              Host: "http-intake.logs.datadoghq.eu"
              TLS: "on"
              dd_service: !Ref ServiceName
              dd_source: "quarkus"
              dd_message_key: "log"
              provider: "ecs"
              apikey: !Sub "{{resolve:secretsmanager:${DDApiKeySecretArn}}}"
        - Name: DatadogAgent
          Image: public.ecr.aws/datadog/agent:latest
          Environment:
            -
              Name: DD_SITE
              Value: "datadoghq.eu"
            -
              Name: ECS_FARGATE
              Value: "true"
            -
              Name: DD_LOGS_ENABLED
              Value: "false"
            -
              Name: DD_PROCESS_AGENT_ENABLED
              Value: "true"
            -
              Name: DD_APM_ENABLED
              Value: "true"
            -
              Name: DD_APM_NON_LOCAL_TRAFFIC
              Value: "true"
            -
              Name: DD_DOGSTATSD_NON_LOCAL_TRAFFIC
              Value: "true"
            -
              Name: DD_ECS_TASK_COLLECTION_ENABLED
              Value: "true"
            -
              Name: DD_ENV
              Value: !Ref Env
            -
              Name: DD_SERVICE
              Value: !Ref ServiceName
            -
              Name: DD_VERSION
              Value: !Ref CommitHash
            -
              Name: DD_APM_IGNORE_RESOURCES
              Value: "GET /"
          Secrets:
            - Name: DD_API_KEY
              ValueFrom: !Ref DDApiKeySecretArn
          PortMappings:
            - ContainerPort: 8125
              HostPort: 8125
            - ContainerPort: 8126
              HostPort: 8126
          Essential: true
        - Name: LogRouter
          Image: amazon/aws-for-fluent-bit:latest
          Essential: true
          FirelensConfiguration:
            Type: fluentbit
            Options:
              enable-ecs-log-metadata: "true"

  OrderApiEndpoint:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${Env}/${ServiceName}/api-endpoint
      Type: String
      Value: !Sub "http://${ECSALB.DNSName}"