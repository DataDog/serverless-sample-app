#
# Unless explicitly stated otherwise all files in this repository are licensed
# under the Apache License Version 2.0.
# This product includes software developed at Datadog (https://www.datadoghq.com/).
# Copyright 2024 Datadog, Inc.
#

AWSTemplateFormatVersion: "2010-09-09"
Transform:
  - AWS::Serverless-2016-10-31
  - Name: DatadogServerless
    Parameters:
      stackName: !Ref "AWS::StackName"
      apiKeySecretArn: !Ref DDApiKeySecretArn
      rustLayerVersion: "115"
      extensionLayerVersion: "66"
      service: !Ref ServiceName
      env: !Ref Env
      version: !Ref CommitHash
      site: !Ref DDSite
      captureLambdaPayload: true
Description: A sample SAM template for deploying Lambda functions.

Parameters:
  ServiceName:
    Type: String
    Default: RustAnalyticsBackend
  Env:
    Type: String
    Default: dev
  CommitHash:
    Type: String
    Default: latest
  DDApiKeySecretArn:
    Type: String
  DDSite:
    Type: String

Globals:
  Function:
    Runtime: provided.al2023
    Timeout: 29
    MemorySize: 512
    Environment:
      Variables:
        ENV: !Ref Env
        DD_EXTENSION_VERSION: "next"
        POWERTOOLS_SERVICE_NAME: !Ref ServiceName
        POWERTOOLS_LOG_LEVEL: "INFO"
    Architectures:
      - x86_64

Resources:
  RustAnalyticsBackend:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/analytics/lambdas/analytics/
      Handler: bootstrap
      FunctionName: !Sub RustAnalyticsBackendFunction-${Env}
      Environment:
        Variables:
          DD_TRACE_PROPAGATION_STYLE: "none"
          USE_SPAN_LINK: "true"
      Events:
        IntegrationQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt RustAnalyticsEventQueue.Arn
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecretArn
    Metadata:
      BuildMethod: rust-cargolambda

  RustAnalyticsEventDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "RustAnalyticsEventDLQ-${Env}"

  RustAnalyticsEventQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "RustAnalyticsEventQueue-${Env}"
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - "RustAnalyticsEventDLQ"
            - "Arn"
        maxReceiveCount: 3

  AnalyticsCatchAllRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: "{{resolve:ssm:/rust/shared/event-bus-name:1}}"
      Name: analytics-catch-all
      State: ENABLED
      EventPattern:
        source:
          - prefix: !Sub "${Env}."
      Targets:
        - Id: RustAnalyticsEventQueue
          Arn: !GetAtt RustAnalyticsEventQueue.Arn

  EBToQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref RustAnalyticsEventQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: allow-eb-send-message-messages
            Effect: Allow
            Principal:
              Service: "events.amazonaws.com"
            Resource: !GetAtt RustAnalyticsEventQueue.Arn
            Action: SQS:SendMessage
