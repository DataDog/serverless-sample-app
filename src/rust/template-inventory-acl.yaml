#
# Unless explicitly stated otherwise all files in this repository are licensed
# under the Apache License Version 2.0.
# This product includes software developed at Datadog (https://www.datadoghq.com/).
# Copyright 2024 Datadog, Inc.
#

AWSTemplateFormatVersion: "2010-09-09"
Transform:
  - AWS::Serverless-2016-10-31
Description: A sample SAM template for deploying Lambda functions.

Parameters:
  ServiceName:
    Type: String
    Default: RustInventoryAcl
  Env:
    Type: String
    Default: dev
  CommitHash:
    Type: String
    Default: latest
  DDApiKeySecretArn:
    Type: String
  DDSite:
    Type: String

Globals:
  Function:
    Runtime: provided.al2023
    Timeout: 29
    MemorySize: 512
    Layers:
      - !Sub arn:aws:lambda:${AWS::Region}:464622532012:layer:Datadog-Extension:66
    Environment:
      Variables:
        ENV: !Ref Env
        DD_ENV: !Ref Env
        DD_API_KEY_SECRET_ARN: !Ref DDApiKeySecretArn
        DD_SITE: !Ref DDSite
        DD_VERSION: !Ref CommitHash
        DD_EXTENSION_VERSION: "next"
        DD_SERVICE: !Ref ServiceName
        POWERTOOLS_SERVICE_NAME: !Ref ServiceName
        POWERTOOLS_LOG_LEVEL: "INFO"
        RUST_LOG: "info"
    Architectures:
      - x86_64

Resources:
  InventoryProductCreatedPublicEventHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/inventory-acl/lambdas/product_created_handler/
      Handler: handle_product_created_event
      FunctionName: !Sub RustInventoryProductCreatedPublicEventHandler-${Env}
      Environment:
        Variables:
          PRODUCT_ADDED_TOPIC_ARN: !Ref NewProductAddedTopic
          DD_SERVICE_MAPPING: !Sub "lambda_sqs:${RustInventoryProductCreatedEventQueue.QueueName}"
      Events:
        IntegrationQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt RustInventoryProductCreatedEventQueue.Arn
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecretArn
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt NewProductAddedTopic.TopicName
    Metadata:
      BuildMethod: rust-cargolambda
      Binary: handle_product_created_event
 
  NewProductAddedTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "RustInventoryNewProductAddedTopic-${Env}"
  
  NewProductAddedTopicArn:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /rust/${Env}/inventory/new-product-added-topic
      Type: String
      Value: !Ref NewProductAddedTopic

  RustInventoryProductCreatedEventDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "RustInventoryProductCreatedEventDLQ-${Env}"

  RustInventoryProductCreatedEventQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "RustInventoryProductCreatedEventQueue-${Env}"
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - "RustInventoryProductCreatedEventDLQ"
            - "Arn"
        maxReceiveCount: 3

  ProductCreatedEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Sub "{{resolve:ssm:/rust/${Env}/shared/event-bus-name:1}}"
      Name: inventory-product-created
      State: ENABLED
      EventPattern:
        source:
          - !Sub "${Env}.products"
        detail-type:
          - "product.productCreated.v1"
      Targets:
        - Id: ProductCreatedEventQueue
          Arn: !GetAtt RustInventoryProductCreatedEventQueue.Arn

  SnsToQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties: 
      Queues:
        - !Ref RustInventoryProductCreatedEventQueue
      PolicyDocument: 
        Version: '2012-10-17'
        Statement:
          - Sid: allow-eb-send-message-messages
            Effect: Allow
            Principal:
              Service: "events.amazonaws.com"
            Resource: !GetAtt RustInventoryProductCreatedEventQueue.Arn
            Action: SQS:SendMessage
