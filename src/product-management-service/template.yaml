#
# Unless explicitly stated otherwise all files in this repository are licensed
# under the Apache License Version 2.0.
# This product includes software developed at Datadog (https://www.datadoghq.com/).
# Copyright 2024 Datadog, Inc.
#

AWSTemplateFormatVersion: "2010-09-09"
Transform:
  - AWS::Serverless-2016-10-31
Description: A sample SAM template for deploying Lambda functions.

Conditions:
  IsNonProdEnvironment: !Not [!Equals [!Ref Env, prod]]
  IsIntegratedEnvironment: !Or
    - !Equals ["dev", !Ref Env]
    - !Equals ["prod", !Ref Env]
  IsNotIntegratedEnvironment: !And
    - !Not [!Equals [!Ref Env, prod]]
    - !Not [!Equals [!Ref Env, dev]]

Parameters:
  ServiceName:
    Type: String
    Default: ProductService
  Env:
    Type: String
    Default: dev
  CommitHash:
    Type: String
    Default: latest
  DDSite:
    Type: String
  DDApiKey:
    Type: String

Globals:
  Function:
    Runtime: provided.al2023
    Timeout: 29
    MemorySize: 512
    Layers:
      - !Sub arn:aws:lambda:${AWS::Region}:464622532012:layer:Datadog-Extension-ARM:78
    Environment:
      Variables:
        ENV: !Ref Env
        AWS_LAMBDA_EXEC_WRAPPER: "/opt/datadog_wrapper"
        DD_CAPTURE_LAMBDA_PAYLOAD: "true"
        DD_COLD_START_TRACING: "true"
        DD_TRACE_ENABLED: "true"
        DD_LAMBDA_HANDLER: "bootstrap"
        DD_ENV: !Ref Env
        DD_API_KEY: !Ref DDApiKey
        DD_SITE: !Ref DDSite
        DD_VERSION: !Ref CommitHash
        DD_SERVICE: !Ref ServiceName
        TABLE_NAME: !Ref ProductApiTable
    Architectures:
      - arm64
  Api:
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"

Resources:
  DDApiKeySecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: !Sub "/${Env}/${ServiceName}/datadog-api-key"
      Description: "The Datadog API key"
      SecretString: !Ref DDApiKey

  ProductServiceEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub "${ServiceName}-Bus-${Env}"

  OrdersBusNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${Env}/${ServiceName}/event-bus-name
      Type: String
      Value: !Ref ProductServiceEventBus

  OrdersBusArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${Env}/${ServiceName}/event-bus-arn
      Type: String
      Value: !GetAtt ProductServiceEventBus.Arn

  OrdersSecretAccessKeyParameter:
    Type: AWS::SSM::Parameter
    Condition: IsNotIntegratedEnvironment
    Properties:
      Name: !Sub /${Env}/${ServiceName}/secret-access-key
      Type: String
      Value: "This is a sample secret key that should not be used in production`"

  GetProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: bootstrap
      FunctionName: !Sub SAM-${ServiceName}-GetProduct-${Env}
      Events:
        GetProduct:
          Type: Api
          Properties:
            Path: /product/{productId}
            Method: get
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ProductApiTable
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
                - dynamodb:GetItem
              Resource: !Ref DDApiKeySecret
        # The Datadog extension sends log data to Datadog using the telemetry API, disabling CloudWatch prevents 'double paying' for logs
        - Version: "2012-10-17"
          Statement:
            - Effect: Deny
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
    Metadata:
      BuildMethod: makefile

  ListProductsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: bootstrap
      FunctionName: !Sub SAM-${ServiceName}-ListProduct-${Env}
      Environment:
        Variables:
          PRODUCT_CREATED_TOPIC_ARN: !Ref ProductCreatedTopic
      Events:
        GetProduct:
          Type: Api
          Properties:
            Path: /product
            Method: get
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProductApiTable
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
                - dynamodb:GetItem
              Resource: !Ref DDApiKeySecret
        # The Datadog extension sends log data to Datadog using the telemetry API, disabling CloudWatch prevents 'double paying' for logs
        - Version: "2012-10-17"
          Statement:
            - Effect: Deny
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt ProductCreatedTopic.TopicName
    Metadata:
      BuildMethod: makefile

  CreateProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: bootstrap
      FunctionName: !Sub SAM-${ServiceName}-CreateProduct-${Env}
      Events:
        GetProduct:
          Type: Api
          Properties:
            Path: /product
            Method: post
      Environment:
        Variables:
          PRODUCT_CREATED_TOPIC_ARN: !Ref ProductCreatedTopic
          JWT_SECRET_PARAM_NAME: !If
            - IsIntegratedEnvironment
            - !Sub /${Env}/shared/secret-access-key
            - !Sub /${Env}/${ServiceName}/secret-access-key
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
              Resource: !GetAtt ProductApiTable.Arn
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
                - dynamodb:GetItem
              Resource: !Ref DDApiKeySecret
        # The Datadog extension sends log data to Datadog using the telemetry API, disabling CloudWatch prevents 'double paying' for logs
        - Version: "2012-10-17"
          Statement:
            - Effect: Deny
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "ssm:DescribeParameters"
                - "ssm:GetParameter"
                - "ssm:GetParameterHistory"
                - "ssm:GetParameters"
              Resource: !If
                - IsIntegratedEnvironment
                - !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/shared/secret-access-key"
                - !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/${ServiceName}/secret-access-key"
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt ProductCreatedTopic.TopicName
    Metadata:
      BuildMethod: makefile

  UpdateProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: bootstrap
      FunctionName: !Sub SAM-${ServiceName}-UpdateProduct-${Env}
      Events:
        GetProduct:
          Type: Api
          Properties:
            Path: /product
            Method: put
      Environment:
        Variables:
          PRODUCT_UPDATED_TOPIC_ARN: !Ref ProductUpdatedTopic
          JWT_SECRET_PARAM_NAME: !If
            - IsIntegratedEnvironment
            - !Sub /${Env}/shared/secret-access-key
            - !Sub /${Env}/${ServiceName}/secret-access-key
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
              Resource: !GetAtt ProductApiTable.Arn
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecret
        # The Datadog extension sends log data to Datadog using the telemetry API, disabling CloudWatch prevents 'double paying' for logs
        - Version: "2012-10-17"
          Statement:
            - Effect: Deny
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "ssm:DescribeParameters"
                - "ssm:GetParameter"
                - "ssm:GetParameterHistory"
                - "ssm:GetParameters"
              Resource: !If
                - IsIntegratedEnvironment
                - !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/shared/secret-access-key"
                - !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/${ServiceName}/secret-access-key"
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt ProductUpdatedTopic.TopicName
    Metadata:
      BuildMethod: makefile

  DeleteProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: bootstrap
      FunctionName: !Sub SAM-${ServiceName}-DeleteProduct-${Env}
      Events:
        GetProduct:
          Type: Api
          Properties:
            Path: /product/{productId}
            Method: delete
      Environment:
        Variables:
          PRODUCT_DELETED_TOPIC_ARN: !Ref ProductDeletedTopic
          JWT_SECRET_PARAM_NAME: !If
            - IsIntegratedEnvironment
            - !Sub /${Env}/shared/secret-access-key
            - !Sub /${Env}/${ServiceName}/secret-access-key
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
                - dynamodb:GetItem
              Resource: !GetAtt ProductApiTable.Arn
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
                - dynamodb:GetItem
              Resource: !Ref DDApiKeySecret
        # The Datadog extension sends log data to Datadog using the telemetry API, disabling CloudWatch prevents 'double paying' for logs
        - Version: "2012-10-17"
          Statement:
            - Effect: Deny
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "ssm:DescribeParameters"
                - "ssm:GetParameter"
                - "ssm:GetParameterHistory"
                - "ssm:GetParameters"
              Resource: !If
                - IsIntegratedEnvironment
                - !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/shared/secret-access-key"
                - !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/${ServiceName}/secret-access-key"
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt ProductDeletedTopic.TopicName
    Metadata:
      BuildMethod: makefile

  ProductCreatedTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${ServiceName}-ProductCreated-${Env}"
  ProductUpdatedTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${ServiceName}-ProductUpdated-${Env}"
  ProductDeletedTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${ServiceName}-ProductDeleted-${Env}"

  ProductCreatedTopicArn:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${Env}/${ServiceName}/product-created-topic
      Type: String
      Value: !Ref ProductCreatedTopic
  ProductUpdatedTopicArn:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${Env}/${ServiceName}/product-updated-topic
      Type: String
      Value: !Ref ProductUpdatedTopic
  ProductDeletedTopicArn:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${Env}/${ServiceName}/product-deleted-topic
      Type: String
      Value: !Ref ProductDeletedTopic

  ProductApiTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${ServiceName}-Products-${Env}
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: PK
          KeyType: HASH

  ProductApiStockUpdatedWorker:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: bootstrap
      FunctionName: !Sub SAM-${ServiceName}-StockUpdated-${Env}
      Events:
        StockUpdatedTopic:
          Type: SNS
          Properties:
            Topic: !Ref StockUpdatedTopic
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProductApiTable
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecret
        # The Datadog extension sends log data to Datadog using the telemetry API, disabling CloudWatch prevents 'double paying' for logs
        - Version: "2012-10-17"
          Statement:
            - Effect: Deny
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
    Metadata:
      BuildMethod: makefile

  ProductApiPricingChangedWorker:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: bootstrap
      FunctionName: !Sub SAM-${ServiceName}-PricingChanged-${Env}
      Events:
        PriceCalculatedTopic:
          Type: SNS
          Properties:
            Topic: !Ref PriceCalculatedTopic
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProductApiTable
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecret
        # The Datadog extension sends log data to Datadog using the telemetry API, disabling CloudWatch prevents 'double paying' for logs
        - Version: "2012-10-17"
          Statement:
            - Effect: Deny
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
    Metadata:
      BuildMethod: makefile

  ProductInventoryStockUpdatedHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: bootstrap
      FunctionName: !Sub SAM-${ServiceName}-ACLStockUpdated-${Env}
      Environment:
        Variables:
          STOCK_LEVEL_UPDATED_TOPIC_ARN: !Ref StockUpdatedTopic
      Events:
        IntegrationQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt ProductStockUpdatedEventQueue.Arn
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecret
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt StockUpdatedTopic.TopicName
        # The Datadog extension sends log data to Datadog using the telemetry API, disabling CloudWatch prevents 'double paying' for logs
        - Version: "2012-10-17"
          Statement:
            - Effect: Deny
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
    Metadata:
      BuildMethod: makefile

  PriceUpdatedACLHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: bootstrap
      FunctionName: !Sub SAM-${ServiceName}-ACLPricingUpdated-${Env}
      Environment:
        Variables:
          PRICE_CALCULATED_TOPIC_ARN: !Ref PriceCalculatedTopic
      Events:
        IntegrationQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt ProductPricingUpdatedEventQueue.Arn
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecret
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt PriceCalculatedTopic.TopicName
        # The Datadog extension sends log data to Datadog using the telemetry API, disabling CloudWatch prevents 'double paying' for logs
        - Version: "2012-10-17"
          Statement:
            - Effect: Deny
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
    Metadata:
      BuildMethod: makefile

  StockUpdatedTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${ServiceName}-ProductStockUpdated-${Env}"

  PriceCalculatedTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${ServiceName}-ProductPriceCalculated-${Env}"

  ProductStockUpdatedDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${ServiceName}-StockUpdatedDLQ-${Env}"

  ProductStockUpdatedEventQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${ServiceName}-StockUpdatedEventQueue-${Env}"
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - "ProductStockUpdatedDLQ"
            - "Arn"
        maxReceiveCount: 3

  ProductStockUpdatedSQSQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ProductStockUpdatedEventQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: allow-eb-send-message-messages
            Effect: Allow
            Principal:
              Service: "events.amazonaws.com"
            Resource: !GetAtt ProductStockUpdatedEventQueue.Arn
            Action: SQS:SendMessage

  ProductPricingUpdatedDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${ServiceName}-PricingUpdatedDLQ-${Env}"

  ProductPricingUpdatedEventQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${ServiceName}-PricingUpdatedEventQueue-${Env}"
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - "ProductPricingUpdatedDLQ"
            - "Arn"
        maxReceiveCount: 3

  ProductPricingUpdatedSQSQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ProductPricingUpdatedEventQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: allow-eb-send-message-messages
            Effect: Allow
            Principal:
              Service: "events.amazonaws.com"
            Resource: !GetAtt ProductPricingUpdatedEventQueue.Arn
            Action: SQS:SendMessage

  ################################################
  ######## Public Event Subscriptions ############
  ################################################
  SharedEventBusToProductServiceEventBusRole:
    Type: AWS::IAM::Role
    Condition: IsIntegratedEnvironment
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: allow-eb-publish
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "events:PutEvents"
                Resource: [!GetAtt ProductServiceEventBus.Arn]

  SharedEventBusStockUpdatedEventRule:
    Type: AWS::Events::Rule
    Condition: IsIntegratedEnvironment
    Properties:
      EventBusName: !Sub "{{resolve:ssm:/${Env}/shared/event-bus-name:1}}"
      Name: shared-product-management-stock-updated
      State: ENABLED
      EventPattern:
        source:
          - !Sub "${Env}.inventory"
        detail-type:
          - "inventory.stockUpdated.v1"
      Targets:
        - Id: ProductServiceEventBus
          Arn: !GetAtt ProductServiceEventBus.Arn
          RoleArn: !GetAtt SharedEventBusToProductServiceEventBusRole.Arn

  SharedEventBusPricingChangedEventRule:
    Type: AWS::Events::Rule
    Condition: IsIntegratedEnvironment
    Properties:
      EventBusName: !Sub "{{resolve:ssm:/${Env}/shared/event-bus-name:1}}"
      Name: shared-product-management-price-updated
      State: ENABLED
      EventPattern:
        source:
          - !Sub "${Env}.pricing"
        detail-type:
          - "pricing.pricingCalculated.v1"
      Targets:
        - Id: ProductServiceEventBus
          Arn: !GetAtt ProductServiceEventBus.Arn
          RoleArn: !GetAtt SharedEventBusToProductServiceEventBusRole.Arn

  StockUpdatedEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref ProductServiceEventBus
      Name: product-management-stock-updated
      State: ENABLED
      EventPattern:
        source:
          - !Sub "${Env}.inventory"
        detail-type:
          - "inventory.stockUpdated.v1"
      Targets:
        - Id: ProductStockUpdatedEventQueue
          Arn: !GetAtt ProductStockUpdatedEventQueue.Arn

  PriceUpdatedEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref ProductServiceEventBus
      Name: product-management-price-updated
      State: ENABLED
      EventPattern:
        source:
          - !Sub "${Env}.pricing"
        detail-type:
          - "pricing.pricingCalculated.v1"
      Targets:
        - Id: ProductPricingUpdatedEventQueue
          Arn: !GetAtt ProductPricingUpdatedEventQueue.Arn

  ProductPublicEventPublisher:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: bootstrap
      FunctionName: !Sub SAM-${ServiceName}-EventPublisher-${Env}
      Environment:
        Variables:
          EVENT_BUS_NAME: !If
            - IsIntegratedEnvironment
            - !Sub "{{resolve:ssm:/${Env}/shared/event-bus-name:1}}"
            - !Ref ProductServiceEventBus
          PRODUCT_CREATED_TOPIC_ARN: !Ref ProductCreatedTopic
          PRODUCT_UPDATED_TOPIC_ARN: !Ref ProductUpdatedTopic
          PRODUCT_DELETED_TOPIC_ARN: !Ref ProductDeletedTopic
      Events:
        IntegrationQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt ProductPublicEventPublisherQueue.Arn
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName: !If
              - IsIntegratedEnvironment
              - !Sub "{{resolve:ssm:/${Env}/shared/event-bus-name:1}}"
              - !Ref ProductServiceEventBus
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecret
        # The Datadog extension sends log data to Datadog using the telemetry API, disabling CloudWatch prevents 'double paying' for logs
        - Version: "2012-10-17"
          Statement:
            - Effect: Deny
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
    Metadata:
      BuildMethod: makefile

  ProductPublicEventPublisherDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${ServiceName}-PublicEventPublisherDLQ-${Env}"

  ProductPublicEventPublisherQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${ServiceName}-PublicEventPublisherQueue-${Env}"
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - "ProductPublicEventPublisherDLQ"
            - "Arn"
        maxReceiveCount: 3

  SnsToQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ProductPublicEventPublisherQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: allow-created-messages
            Effect: Allow
            Principal: "*"
            Resource: !GetAtt ProductPublicEventPublisherQueue.Arn
            Action: SQS:SendMessage
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref ProductCreatedTopic
          - Sid: allow-updated-messages
            Effect: Allow
            Principal: "*"
            Resource: !GetAtt ProductPublicEventPublisherQueue.Arn
            Action: SQS:SendMessage
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref ProductUpdatedTopic
          - Sid: allow-deleted-messages
            Effect: Allow
            Principal: "*"
            Resource: !GetAtt ProductPublicEventPublisherQueue.Arn
            Action: SQS:SendMessage
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref ProductDeletedTopic

  ProductCreatedTopicSubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      TopicArn: !Ref ProductCreatedTopic
      Endpoint: !GetAtt
        - ProductPublicEventPublisherQueue
        - Arn
      Protocol: sqs

  ProductUpdatedTopicSubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      TopicArn: !Ref ProductUpdatedTopic
      Endpoint: !GetAtt
        - ProductPublicEventPublisherQueue
        - Arn
      Protocol: sqs

  ProductDeletedTopicSubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      TopicArn: !Ref ProductDeletedTopic
      Endpoint: !GetAtt
        - ProductPublicEventPublisherQueue
        - Arn
      Protocol: sqs

  ApiEndpoint:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${Env}/${ServiceName}/api-endpoint
      Type: String
      Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"

Outputs:
  ProductEndpoint:
    Description: Product API Endpoint
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
    Export:
      Name: ProductApiEndpoint
