AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: This template deploys ALB with ECS Fargate cluster

Parameters: 
  ServiceName: 
    Type: String
    Default: JavaInventoryApi
  Env: 
    Type: String
    Default: dev
  CommitHash:
    Type: String
    Default: latest
  DDApiKeySecretArn:
    Type: String
  DDSite:
    Type: String

Resources:
  InventoryApiTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub JavaInventoryApi-${Env}
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: PK
          KeyType: HASH

  VPC: 
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
  
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
  
  PublicSubnet2: 
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [1, !GetAZs '']

  InternetGateway:
    Type: AWS::EC2::InternetGateway
  
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  
  PublicRoute: 
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation  
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:  
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow incoming HTTP traffic
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0 
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
  MicroServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow incoming HTTP traffic
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0 
          IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          Description: Allow incoming HTTP traffic from ALB
        - CidrIpv6: ::/0
          IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          Description: Allow incoming HTTP traffic from ALB
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: inventory-service-cluster

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 2 
      TaskDefinition: !Ref ECSTaskDef
      LaunchType: FARGATE
      ServiceName: inventory-api
      SchedulingStrategy: REPLICA
      LoadBalancers:
        - ContainerName: JavaInventoryApi
          ContainerPort: 8080
          TargetGroupArn: !Ref ECSALBTargetGroup
      HealthCheckGracePeriodSeconds: 29
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref MicroServiceSecurityGroup
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
      PlatformVersion: LATEST
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DeploymentController:
        Type: ECS
      ServiceConnectConfiguration:
        Enabled: false
      Tags: []
      EnableECSManagedTags: true
    DependsOn:
      - ALBListener        

  ECSALBTargetGroup:  
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /health
      Name: inventory-api-alb-tg
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      HealthCheckProtocol: HTTP 
      HealthCheckIntervalSeconds: 60
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPC

  ECSALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: java-inventory-api-alb
      Type: application
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
  
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ECSALBTargetGroup
      LoadBalancerArn: !Ref ECSALB
      Port: 80
      Protocol: HTTP

  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ecs-service-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: cloudwatch-logs-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: "*"
        - PolicyName: allow-secrets-retrieve
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref DDApiKeySecretArn

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: dynamo-db-crud
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:BatchWriteItem"
                  - "dynamodb:ConditionCheckItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:DescribeTable"
                  - "dynamodb:GetItem"
                  - "dynamodb:GetRecords"
                  - "dynamodb:GetShardIterator"
                  - "dynamodb:PutItem"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:UpdateItem"
                Resource: !GetAtt InventoryApiTable.Arn
        - PolicyName: allow-eb-publish
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "events:PutEvents"
                  - "events:ListEventBuses"
                Resource: "*"
        - PolicyName: allow-secrets-retrieve
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref DDApiKeySecretArn

  ECSTaskDef:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - FARGATE
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      Family: inventory-api-definition
      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      RuntimePlatform:
        CpuArchitecture: ARM64
        OperatingSystemFamily: LINUX
      ContainerDefinitions:
        - Name: JavaInventoryApi
          Image: public.ecr.aws/k4y9x2e7/dd-serverless-sample-app-inventory-java:latest
          Environment:
            - 
              Name: TABLE_NAME
              Value: !Ref InventoryApiTable
            -
              Name: EVENT_BUS_NAME
              Value: !Sub "{{resolve:ssm:/java/${Env}/shared/event-bus-name:1}}"
            - 
              Name: TEAM
              Value: "inventory"
            - 
              Name: DOMAIN
              Value: "inventory"
            -
              Name: ENV
              Value: env
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
              HostPort: 8080
              AppProtocol: http
              Name: inventory-api
          Essential: true
          LogConfiguration:
            LogDriver: awsfirelens
            Options:
              Name: "datadog"
              Host: "http-intake.logs.datadoghq.eu"
              TLS: "on"
              dd_service: "JavaInventoryApi"
              dd_source: "expressjs"
              dd_message_key: "log"
              provider: "ecs"
              apikey: !Sub "{{resolve:secretsmanager:${DDApiKeySecretArn}}}"
        - Name: DatadogAgent
          Image: public.ecr.aws/datadog/agent:latest
          Environment:
            - 
              Name: DD_SITE
              Value: "datadoghq.eu"
            -
              Name: ECS_FARGATE
              Value: "true"
            - 
              Name: DD_LOGS_ENABLED
              Value: "false"
            - 
              Name: DD_PROCESS_AGENT_ENABLED
              Value: "true"
            -
              Name: DD_APM_ENABLED
              Value: "true"
            -
              Name: DD_APM_NON_LOCAL_TRAFFIC
              Value: "true"
            -
              Name: DD_DOGSTATSD_NON_LOCAL_TRAFFIC
              Value: "true"
            -
              Name: DD_ECS_TASK_COLLECTION_ENABLED
              Value: "true"
            -
              Name: DD_ENV
              Value: !Ref Env
            -
              Name: DD_SERVICE
              Value: !Ref ServiceName
            -
              Name: DD_VERSION
              Value: !Ref CommitHash
            -
              Name: DD_APM_IGNORE_RESOURCES
              Value: "GET /"
          Secrets:
            - Name: DD_API_KEY
              ValueFrom: !Ref DDApiKeySecretArn
          PortMappings:
            - ContainerPort: 8125
              HostPort: 8125
            - ContainerPort: 8126
              HostPort: 8126
          Essential: true
        - Name: LogRouter
          Image: amazon/aws-for-fluent-bit:latest
          Essential: true
          FirelensConfiguration:
            Type: fluentbit
            Options:
              enable-ecs-log-metadata: "true"

  InventoryApiTableName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /java/inventory-api/table-name
      Type: String
      Value: !Ref InventoryApiTable

  InventoryApiEndpoint:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /java/${Env}/inventory/api-endpoint
      Type: String
      Value: !Sub "http://${ECSALB.DNSName}"

Outputs:
  ECSCluster: 
    Description: A reference to the ECS cluster
    Value: !Ref ECSCluster
  
  ECSALBDNSName:
    Description: The DNS name of the ALB
    Value: !GetAtt ECSALB.DNSName
