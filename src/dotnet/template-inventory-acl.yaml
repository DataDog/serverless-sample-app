#
# Unless explicitly stated otherwise all files in this repository are licensed
# under the Apache License Version 2.0.
# This product includes software developed at Datadog (https://www.datadoghq.com/).
# Copyright 2024 Datadog, Inc.
#

AWSTemplateFormatVersion: "2010-09-09"
Transform:
  - AWS::Serverless-2016-10-31
  - Name: DatadogServerless
    Parameters:
      stackName: !Ref "AWS::StackName"
      apiKeySecretArn: !Ref DDApiKeySecretArn
      dotnetLayerVersion: "16"
      extensionLayerVersion: "66"
      service: !Ref ServiceName
      env: !Ref Env
      version: !Ref CommitHash
      site: !Ref DDSite
      captureLambdaPayload: true
Description: A sample SAM template for deploying Lambda functions.

Parameters:
  ServiceName:
    Type: String
    Default: DotnetInventoryAcl
  Env:
    Type: String
    Default: dev
  CommitHash:
    Type: String
    Default: latest
  DDApiKeySecretArn:
    Type: String
  DDSite:
    Type: String

Globals:
  Function:
    Runtime: dotnet8
    Timeout: 29
    MemorySize: 2048
    Environment:
      Variables:
        ENV: !Ref Env
        DD_LOGS_INJECTION: "true"
        DD_EXTENSION_VERSION: next
        POWERTOOLS_SERVICE_NAME: !Ref ServiceName
        POWERTOOLS_LOG_LEVEL: 'INFO'
        AWS_LAMBDA_EXEC_WRAPPER: /opt/datadog_wrapper
    Architectures:
      - x86_64

Resources:
  InventoryProductCreatedPublicEventHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/Inventory.Acl/Inventory.Acl.Adapters/
      Handler: Inventory.Acl.Adapters::Inventory.Acl.Adapters.HandlerFunctions_HandleCreated_Generated::HandleCreated
      FunctionName: !Sub DotnetInventoryProductCreatedPublicEventHandler-${Env}
      Environment:
        Variables:
          PRODUCT_ADDED_TOPIC_ARN: !Ref NewProductAddedTopic
          DD_SERVICE_MAPPING: !Sub "lambda_sqs:${DotnetInventoryProductCreatedEventQueue.QueueName}"
      Events:
        IntegrationQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt DotnetInventoryProductCreatedEventQueue.Arn
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecretArn
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt NewProductAddedTopic.TopicName
 
  NewProductAddedTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "DotnetInventoryNewProductAddedTopic-${Env}"
  
  NewProductAddedTopicArn:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /dotnet/${Env}/inventory/new-product-added-topic
      Type: String
      Value: !Ref NewProductAddedTopic

  DotnetInventoryProductCreatedEventDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "DotnetInventoryProductCreatedEventDLQ-${Env}"

  DotnetInventoryProductCreatedEventQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "DotnetInventoryProductCreatedEventQueue-${Env}"
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - "DotnetInventoryProductCreatedEventDLQ"
            - "Arn"
        maxReceiveCount: 3

  ProductCreatedEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Sub "{{resolve:ssm:/dotnet/${Env}/shared/event-bus-name:1}}"
      Name: inventory-product-created
      State: ENABLED
      EventPattern:
        source:
          - !Sub "${Env}.products"
        detail-type:
          - "product.productCreated.v1"
      Targets:
        - Id: ProductCreatedEventQueue
          Arn: !GetAtt DotnetInventoryProductCreatedEventQueue.Arn

  SnsToQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties: 
      Queues:
        - !Ref DotnetInventoryProductCreatedEventQueue
      PolicyDocument: 
        Version: '2012-10-17'
        Statement:
          - Sid: allow-eb-send-message-messages
            Effect: Allow
            Principal:
              Service: "events.amazonaws.com"
            Resource: !GetAtt DotnetInventoryProductCreatedEventQueue.Arn
            Action: SQS:SendMessage
