#
# Unless explicitly stated otherwise all files in this repository are licensed
# under the Apache License Version 2.0.
# This product includes software developed at Datadog (https://www.datadoghq.com/).
# Copyright 2024 Datadog, Inc.
#

AWSTemplateFormatVersion : '2010-09-09'
Transform: 
  - AWS::Serverless-2016-10-31
  - Name: DatadogServerless
    Parameters:
      stackName: !Ref "AWS::StackName"
      apiKey: !Ref DDApiKey
      nodeLayerVersion: 125
      extensionLayerVersion: 82
      service: !Ref ServiceName
      env: !Ref Env
      version: !Ref CommitHash
      site: !Ref DDSite
      captureLambdaPayload: true
Description: A sample SAM template for deploying Order MCP Service.

Conditions:
  IsNonProdEnvironment: !Not [!Equals [!Ref Env, prod]]
  IsIntegratedEnvironment: !Or
    - !Equals [ "dev", !Ref Env ]
    - !Equals [ "prod", !Ref Env ]
  IsNotIntegratedEnvironment: !And
    - !Not [!Equals [!Ref Env, prod]]
    - !Not [!Equals [!Ref Env, dev]]

Parameters: 
  ServiceName: 
    Type: String
    Default: OrderMcpService
  Env: 
    Type: String
    Default: dev
  CommitHash:
    Type: String
    Default: latest
  DDApiKey:
    Type: String
  DDSite:
    Type: String
    Default: datadoghq.com

Globals:
  Function:
    Runtime: nodejs22.x
    Timeout: 29
    MemorySize: 512
    Environment:
      Variables:
        ENV: !Ref Env
        POWERTOOLS_SERVICE_NAME: !Ref ServiceName
        POWERTOOLS_LOG_LEVEL: !If [!Equals [!Ref Env, prod], 'WARN', 'INFO']
        DD_LOGS_INJECTION: "true"
        DD_DATA_STREAMS_ENABLED: "true"
        DD_TRACE_REMOVE_INTEGRATION_SERVICE_NAMES_ENABLED: "true"
        TEAM: "order-mcp"
        DOMAIN: "order-mcp"
        BUILD_ID: !Ref CommitHash
        DEPLOYED_AT: !Ref "AWS::Timestamp"
    Architectures:
      - x86_64

Resources:
  DDApiKeySecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub "/${Env}/${ServiceName}/dd-api-key"
      Description: "The Datadog API key"
      SecretString: !Ref DDApiKey

  OrderMcpServiceEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub "${ServiceName}-bus-${Env}"

  OrderMcpBusNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${Env}/${ServiceName}/event-bus-name
      Type: String
      Value: !Ref OrderMcpServiceEventBus

  OrderMcpBusArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${Env}/${ServiceName}/event-bus-arn
      Type: String
      Value: !GetAtt OrderMcpServiceEventBus.Arn

  OrderMcpSecretAccessKeyParameter:
    Type: AWS::SSM::Parameter
    Condition: IsNotIntegratedEnvironment
    Properties:
      Name: !Sub /${Env}/${ServiceName}/secret-access-key
      Type: String
      Value: "This is a sample secret key that should not be used in production`"

  OrderMcpHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Name: !Sub "${ServiceName}-API-${Env}"
      CorsConfiguration:
        AllowHeaders:
          - "*"
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
        AllowOrigins:
          - "*"
        MaxAge: 86400
      
################################################
################     API     ###################
################################################

  OrderMcpServerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./out/order-mcp/order-mcp.zip
      Handler: run.sh
      FunctionName: !Sub OrderMcpFunction-${Env}
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:753240598075:layer:LambdaAdapterLayerX86:25"
      Environment:
        Variables:
          AUTH_SERVER_PARAMETER_NAME: !Sub /${Env}/Users/api-endpoint
          MCP_SERVER_ENDPOINT_PARAMETER_NAME: !Sub /${Env}/${ServiceName}/api-endpoint
          JWT_SECRET_PARAM_NAME: !If
            - IsIntegratedEnvironment
            - !Sub /${Env}/shared/secret-access-key
            - !Sub /${Env}/${ServiceName}/secret-access-key
          DD_TRACE_PARTIAL_FLUSH_MIN_SPANS: "1"
          DD_TRACE_PARTIAL_FLUSH_ENABLED: "false"
          AWS_LAMBDA_EXEC_WRAPPER: "/opt/bootstrap"
          AWS_LWA_PORT: "3000"
      Events:
        ProxyRoute:
          Type: HttpApi
          Properties:
            ApiId: !Ref OrderMcpHttpApi
            Path: /{proxy+}
            Method: ANY
        RootRoute:
          Type: HttpApi
          Properties:
            ApiId: !Ref OrderMcpHttpApi
            Path: /
            Method: ANY
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecret
        # The Datadog extension sends log data to Datadog using the telemetry API, disabling CloudWatch prevents 'double paying' for logs
        - Version: "2012-10-17"
          Statement:
            - Effect: Deny
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "ssm:GetParameter"
                - "ssm:GetParameters"
                - "ssm:GetParametersByPath"
              Resource: 
                - !If
                  - IsIntegratedEnvironment
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Env}/shared/secret-access-key"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Env}/${ServiceName}/secret-access-key"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Env}/OrdersService/api-endpoint"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Env}/ProductService/api-endpoint"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Env}/Users/api-endpoint"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Env}/${ServiceName}/api-endpoint"
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "kms:Decrypt"
              Resource: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/ssm"

  OrderMcpAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./out/authorizerFunction/authorizerFunction.zip
      Handler: index.handler
      FunctionName: !Sub OrderMcpAuthorizerFunction-${Env}
      Environment:
        Variables:
          JWT_SECRET_PARAM_NAME: !If
            - IsIntegratedEnvironment
            - !Sub /${Env}/shared/secret-access-key
            - !Sub /${Env}/${ServiceName}/secret-access-key
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecret
        # The Datadog extension sends log data to Datadog using the telemetry API, disabling CloudWatch prevents 'double paying' for logs
        - Version: "2012-10-17"
          Statement:
            - Effect: Deny
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "ssm:GetParameter"
                - "ssm:GetParameters"
                - "ssm:GetParametersByPath"
              Resource: !If
                - IsIntegratedEnvironment
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Env}/shared/secret-access-key"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Env}/${ServiceName}/secret-access-key"
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "kms:Decrypt"
              Resource: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/ssm"

################################################
############# EventBridge Integration ###########
################################################

################################################
######## Public Event Subscriptions ############
################################################
  SharedEventBusToOrderMcpServiceEventBusRole:
    Type: AWS::IAM::Role
    Condition: IsIntegratedEnvironment
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: allow-eb-publish
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "events:PutEvents"
                Resource: [!GetAtt OrderMcpServiceEventBus.Arn]

  SharedEventBusOrderMcpEventRule:
    Type: AWS::Events::Rule
    Condition: IsIntegratedEnvironment
    Properties:
      EventBusName: !Sub "{{resolve:ssm:/${Env}/shared/event-bus-name:1}}"
      Name: shared-order-mcp-events
      State: ENABLED
      EventPattern:
        source:
          - !Sub "${Env}.orders"
          - !Sub "${Env}.users"
          - !Sub "${Env}.products"
      Targets:
        - Id: OrderMcpServiceEventBus
          Arn: !GetAtt OrderMcpServiceEventBus.Arn
          RoleArn: !GetAtt SharedEventBusToOrderMcpServiceEventBusRole.Arn

  ApiEndpoint:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${Env}/${ServiceName}/api-endpoint
      Type: String
      Value: !Sub "https://${OrderMcpHttpApi}.execute-api.${AWS::Region}.amazonaws.com/"