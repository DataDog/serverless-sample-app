#
# Unless explicitly stated otherwise all files in this repository are licensed
# under the Apache License Version 2.0.
# This product includes software developed at Datadog (https://www.datadoghq.com/).
# Copyright 2024 Datadog, Inc.
# 

service: serverless-inventory-ordering-service
frameworkVersion: "3"

plugins:
  - serverless-step-functions
  - serverless-plugin-datadog
  - serverless-plugin-resource-tagging

custom:
  serviceName: InventoryService
  datadog:
    apiKeySecretArn: ${param:DD_API_KEY_SECRET_ARN}
    site: ${param:DD_SITE}
    env: ${sls:stage}
    service: ${self:custom.serviceName}
    version: 68
    # Use this property with care in production to ensure PII/Sensitive data is not stored in Datadog
    captureLambdaPayload: true
    propagateUpstreamTrace: true
  newProductAddedTopicName: InventoryNewProductAddedTopic-${sls:stage}
  apiKeySecret: ${ssm:/aws/reference/secretsmanager/dd-api-key-je-serverless-sample-app}


provider:
  name: aws
  runtime: java21
  memorySize: 2048
  timeout: 29
  logRetentionInDays: 1
  stackTags:
    DD_PRESERVE_STACK: "true"
  environment:
    ENV: ${sls:stage}
    DD_LOGS_INJECTION: "true"
    MAIN_CLASS: com.inventory.ordering.FunctionConfiguration
    AWS_LAMBDA_EXEC_WRAPPER: /opt/datadog_wrapper
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource: !Sub ${param:DD_API_KEY_SECRET_ARN}
        - Effect: Allow
          Action:
            - states:StartExecution
          Resource:
            - !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:inventoryOrderingWorkflow${sls:stage}
        - Effect: Allow
          Action:
            - "ssm:DescribeParameters"
            - "ssm:GetParameter"
            - "ssm:GetParameterHistory"
            - "ssm:GetParameters"
          Resource: "arn:aws:ssm:${aws:region}:*:parameter/${sls:stage}/shared/secret-access-key"
functions:
  publishPublicEvents:
    handler: org.springframework.cloud.function.adapter.aws.FunctionInvoker::handleRequest
    environment:
      PRODUCT_ADDED_TOPIC_ARN: !Ref NewProductAddedTopic
      DD_SERVICE_MAPPING: !Sub "lambda_sqs:${InventoryProductCreatedEventQueue.QueueName}"
      spring_cloud_function_definition: handleProductCreatedEvent
    package:
      artifact: ./inventory-acl/target/com.inventory.acl-0.0.1-SNAPSHOT-aws.jar
      individually: true
    events:
      - sqs:
          arn:
            Fn::GetAtt: [InventoryProductCreatedEventQueue, Arn]

  startOrderWorkflow:
    handler: org.springframework.cloud.function.adapter.aws.FunctionInvoker::handleRequest
    environment:
      ORDERING_SERVICE_WORKFLOW_ARN: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:inventoryOrderingWorkflow${sls:stage}
      spring_cloud_function_definition: handleNewProductAdded
    package:
      artifact: ./inventory-ordering-service/target/com.inventory.ordering-0.0.1-SNAPSHOT-aws.jar
      individually: true
    events:
      - sns: 
          arn:
            Fn::GetAtt: [NewProductAddedTopic, TopicArn]
          topicName: InventoryNewProductAddedTopic-${sls:stage}

stepFunctions:
  stateMachines:
    inventoryOrderingWorkflow:
      name: inventoryOrderingWorkflow${sls:stage}
      definition: ${file(cdk/src/main/java/com/cdk/inventory/ordering/workflows/workflow.sample.asl.json)}
      loggingConfig:
        level: ALL
        includeExecutionData: true
        destinations:
          - Fn::GetAtt: [InventoryOrderingServiceLogGroup, Arn]
      tags:
          DD_ENHANCED_METRICS: "true"
          DD_TRACE_ENABLED: "true"

resources:
  Resources:
    NewProductAddedTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: !Sub ${self:custom.newProductAddedTopicName}

    InventoryProductCreatedEventDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: !Sub "InventoryProductCreatedEventDLQ-${sls:stage}"

    InventoryProductCreatedEventQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: !Sub "InventoryProductCreatedEventQueue-${sls:stage}"
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - "InventoryProductCreatedEventDLQ"
              - "Arn"
          maxReceiveCount: 3

    ProductCreatedEventRule:
      Type: AWS::Events::Rule
      Properties:
        EventBusName: !Sub "${ssm:/${sls:stage}/shared/event-bus-name}"
        Name: inventory-product-created
        State: ENABLED
        EventPattern:
          source:
            - !Sub "${sls:stage}.products"
          detail-type:
            - "product.productCreated.v1"
        Targets:
          - Id: ProductCreatedEventQueue
            Arn: !GetAtt InventoryProductCreatedEventQueue.Arn

    SnsToQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties: 
        Queues:
          - !Ref InventoryProductCreatedEventQueue
        PolicyDocument: 
          Version: '2012-10-17'
          Statement:
            - Sid: allow-eb-send-message-messages
              Effect: Allow
              Principal:
                Service: "events.amazonaws.com"
              Resource: !GetAtt InventoryProductCreatedEventQueue.Arn
              Action: SQS:SendMessage

    InventoryOrderingServiceLogGroup: 
      Type: AWS::Logs::LogGroup
      Properties: 
        RetentionInDays: 1
        LogGroupName: !Sub "/aws/vendedlogs/states/InventoryOrderingServiceLogGroup-${sls:stage}"

    InventoryApiTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: !Sub InventoryApi-${sls:stage}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: PK
            KeyType: HASH

    VPC: 
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
    
    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: 10.0.0.0/24
        AvailabilityZone: !Select [0, !GetAZs '']
    
    PublicSubnet2: 
      Type: AWS::EC2::Subnet
      Properties: 
        VpcId: !Ref VPC
        CidrBlock: 10.0.1.0/24
        AvailabilityZone: !Select [1, !GetAZs '']

    InternetGateway:
      Type: AWS::EC2::InternetGateway
    
    VPCGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: !Ref VPC
        InternetGatewayId: !Ref InternetGateway

    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
    
    PublicRoute: 
      Type: AWS::EC2::Route
      DependsOn: VPCGatewayAttachment
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: '0.0.0.0/0'
        GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation  
      Properties:
        SubnetId: !Ref PublicSubnet1
        RouteTableId: !Ref PublicRouteTable

    PublicSubnet2RouteTableAssociation:  
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnet2
        RouteTableId: !Ref PublicRouteTable

    ALBSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow incoming HTTP traffic
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - CidrIp: 0.0.0.0/0 
            IpProtocol: tcp
            FromPort: 80
            ToPort: 80

    MicroServiceSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow incoming HTTP traffic
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - CidrIp: 0.0.0.0/0 
            IpProtocol: tcp
            FromPort: 8080
            ToPort: 8080
            Description: Allow incoming HTTP traffic from ALB
          - CidrIpv6: ::/0
            IpProtocol: tcp
            FromPort: 8080
            ToPort: 8080
            Description: Allow incoming HTTP traffic from ALB
    ECSCluster:
      Type: AWS::ECS::Cluster
      Properties:
        ClusterName: !Sub ${self:custom.serviceName}-cluster-${sls:stage}

    ECSService:
      Type: AWS::ECS::Service
      Properties:
        Cluster: !Ref ECSCluster
        DesiredCount: 2 
        TaskDefinition: !Ref ECSTaskDef
        LaunchType: FARGATE
        ServiceName: inventory-api
        SchedulingStrategy: REPLICA
        LoadBalancers:
          - ContainerName: InventoryApi
            ContainerPort: 8080
            TargetGroupArn: !Ref ECSALBTargetGroup
        HealthCheckGracePeriodSeconds: 29
        NetworkConfiguration:
          AwsvpcConfiguration:
            AssignPublicIp: ENABLED
            SecurityGroups:
              - !Ref MicroServiceSecurityGroup
            Subnets:
              - !Ref PublicSubnet1
              - !Ref PublicSubnet2
        PlatformVersion: LATEST
        DeploymentConfiguration:
          MaximumPercent: 200
          MinimumHealthyPercent: 100
          DeploymentCircuitBreaker:
            Enable: true
            Rollback: true
        DeploymentController:
          Type: ECS
        ServiceConnectConfiguration:
          Enabled: false
        Tags: []
        EnableECSManagedTags: true
      DependsOn:
        - ALBListener        

    ECSALBTargetGroup:  
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckPath: /health
        Name: !Sub ${self:custom.serviceName}-tg-${sls:stage}
        Port: 80
        Matcher:
          HttpCode: 200-499
        Protocol: HTTP
        TargetType: ip
        HealthCheckPort: 8080
        HealthCheckProtocol: HTTP
        HealthCheckIntervalSeconds: 60
        HealthCheckTimeoutSeconds: 30
        HealthyThresholdCount: 2
        UnhealthyThresholdCount: 5
        VpcId: !Ref VPC

    ECSALB:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Name: !Sub ${self:custom.serviceName}-api-${sls:stage}
        Type: application
        Scheme: internet-facing
        Subnets:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
        SecurityGroups:
          - !Ref ALBSecurityGroup
    
    ALBListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref ECSALBTargetGroup
        LoadBalancerArn: !Ref ECSALB
        Port: 80
        Protocol: HTTP

    ECSExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ecs-tasks.amazonaws.com
              Action:
                - sts:AssumeRole
        Path: /
        Policies:
          - PolicyName: ecs-service-policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "*"
          - PolicyName: cloudwatch-logs-policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - logs:DescribeLogStreams
                  Resource: "*"
          - PolicyName: allow-secrets-retrieve
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - secretsmanager:GetSecretValue
                  Resource: !Sub ${param:DD_API_KEY_SECRET_ARN}

    ECSTaskRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ecs-tasks.amazonaws.com
              Action:
                - sts:AssumeRole
        Path: /
        Policies:
          - PolicyName: dynamo-db-crud
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "dynamodb:BatchGetItem"
                    - "dynamodb:BatchWriteItem"
                    - "dynamodb:ConditionCheckItem"
                    - "dynamodb:DeleteItem"
                    - "dynamodb:DescribeTable"
                    - "dynamodb:GetItem"
                    - "dynamodb:GetRecords"
                    - "dynamodb:GetShardIterator"
                    - "dynamodb:PutItem"
                    - "dynamodb:Query"
                    - "dynamodb:Scan"
                    - "dynamodb:UpdateItem"
                  Resource: !GetAtt InventoryApiTable.Arn
          - PolicyName: allow-eb-publish
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "events:PutEvents"
                    - "events:ListEventBuses"
                  Resource: "*"
          - PolicyName: allow-secrets-retrieve
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - secretsmanager:GetSecretValue
                  Resource: !Sub ${param:DD_API_KEY_SECRET_ARN}
          - PolicyName: allow-ssm-access-key-retrieve
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "ssm:DescribeParameters"
                    - "ssm:GetParameter"
                    - "ssm:GetParameterHistory"
                    - "ssm:GetParameters"
                  Resource: !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${sls:stage}/shared/secret-access-key"

    ECSTaskDef:
      Type: AWS::ECS::TaskDefinition
      Properties:
        RequiresCompatibilities:
          - FARGATE
        Cpu: "256"
        Memory: "512"
        NetworkMode: awsvpc
        Family: inventory-api-definition
        ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn
        TaskRoleArn: !GetAtt ECSTaskRole.Arn
        RuntimePlatform:
          CpuArchitecture: ARM64
          OperatingSystemFamily: LINUX
        ContainerDefinitions:
          - Name: InventoryApi
            Image: public.ecr.aws/k4y9x2e7/dd-serverless-sample-app-inventory-java:latest
            Environment:
              - 
                Name: TABLE_NAME
                Value: !Ref InventoryApiTable
              -
                Name: EVENT_BUS_NAME
                Value: !Sub "{{resolve:ssm:/${sls:stage}/shared/event-bus-name:1}}"
              -
                Name: JWT_SECRET_PARAM_NAME
                Value: !Sub "/${sls:stage}/shared/secret-access-key"
              - 
                Name: TEAM
                Value: "inventory"
              - 
                Name: DOMAIN
                Value: "inventory"
              -
                Name: ENV
                Value: !Sub ${sls:stage}
            PortMappings:
              - ContainerPort: 8080
                Protocol: tcp
                HostPort: 8080
                AppProtocol: http
                Name: inventory-api
            Essential: true
            LogConfiguration:
              LogDriver: awsfirelens
              Options:
                Name: "datadog"
                Host: "http-intake.logs.datadoghq.eu"
                TLS: "on"
                dd_service: !Sub ${self:custom.serviceName}
                dd_source: "quarkus"
                dd_message_key: "log"
                provider: "ecs"
                apikey: !Sub ${self:custom.apiKeySecret}
          - Name: DatadogAgent
            Image: public.ecr.aws/datadog/agent:latest
            Environment:
              - 
                Name: DD_SITE
                Value: "datadoghq.eu"
              -
                Name: ECS_FARGATE
                Value: "true"
              - 
                Name: DD_LOGS_ENABLED
                Value: "false"
              - 
                Name: DD_PROCESS_AGENT_ENABLED
                Value: "true"
              -
                Name: DD_APM_ENABLED
                Value: "true"
              -
                Name: DD_APM_NON_LOCAL_TRAFFIC
                Value: "true"
              -
                Name: DD_DOGSTATSD_NON_LOCAL_TRAFFIC
                Value: "true"
              -
                Name: DD_ECS_TASK_COLLECTION_ENABLED
                Value: "true"
              -
                Name: DD_ENV
                Value: !Sub ${sls:stage}
              -
                Name: DD_SERVICE
                Value: !Sub ${self:custom.serviceName}
              -
                Name: DD_VERSION
                Value: !Sub ${param:COMMIT_HASH}
              -
                Name: DD_APM_IGNORE_RESOURCES
                Value: "GET /"
            Secrets:
              - Name: DD_API_KEY
                ValueFrom: !Sub ${param:DD_API_KEY_SECRET_ARN}
            PortMappings:
              - ContainerPort: 8125
                HostPort: 8125
              - ContainerPort: 8126
                HostPort: 8126
            Essential: true
          - Name: LogRouter
            Image: amazon/aws-for-fluent-bit:latest
            Essential: true
            FirelensConfiguration:
              Type: fluentbit
              Options:
                enable-ecs-log-metadata: "true"

    # InventoryApiEndpoint:
    #   Type: AWS::SSM::Parameter
    #   Properties:
    #     Name: !Sub /${sls:stage}/${self:custom.serviceName}/api-endpoint
    #     Type: String
    #     Value: !Sub "http://${ECSALB.DNSName}"
