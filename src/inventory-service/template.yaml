#
# Unless explicitly stated otherwise all files in this repository are licensed
# under the Apache License Version 2.0.
# This product includes software developed at Datadog (https://www.datadoghq.com/).
# Copyright 2024 Datadog, Inc.
#

AWSTemplateFormatVersion: '2010-09-09'
Transform:
  - AWS::Serverless-2016-10-31
  - Name: DatadogServerless
    Parameters:
      stackName: !Ref AWS::StackName
      apiKey: !Ref DDApiKey
      javaLayerVersion: '18'
      extensionLayerVersion: '74'
      service: !Ref ServiceName
      env: !Ref Env
      version: !Ref CommitHash
      site: !Ref DDSite
      captureLambdaPayload: true
Description: A sample SAM template for deploying Lambda functions.

Conditions:
  IsIntegratedEnvironment: !Or
    - !Equals
      - dev
      - !Ref Env
    - !Equals
      - prod
      - !Ref Env
  IsNotIntegratedEnvironment: !And
    - !Not
      - !Equals
        - !Ref Env
        - prod
    - !Not
      - !Equals
        - !Ref Env
        - dev

Parameters:
  ServiceName:
    Type: String
    Default: InventoryService
  Env:
    Type: String
    Default: dev
  CommitHash:
    Type: String
    Default: latest
  DDSite:
    Type: String
  DDApiKey:
    Type: String

Globals:
  Function:
    Runtime: java21
    Timeout: 29
    MemorySize: 2048
    Environment:
      Variables:
        TEAM: inventory
        DOMAIN: inventory
        ENV: !Ref Env
        DD_LOGS_INJECTION: 'true'
        POWERTOOLS_SERVICE_NAME: !Ref ServiceName
        POWERTOOLS_LOG_LEVEL: INFO
        AWS_LAMBDA_EXEC_WRAPPER: /opt/datadog_wrapper
    Architectures:
      - x86_64

Resources:
  DDApiKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub /${Env}/${ServiceName}/datadog-api-key
      Description: The Datadog API key
      SecretString: !Ref DDApiKey

  InventoryServiceEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub ${ServiceName}-Bus-${Env}

  InventoryBusNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${Env}/${ServiceName}/event-bus-name
      Type: String
      Value: !Ref InventoryServiceEventBus

  InventoryBusArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${Env}/${ServiceName}/event-bus-arn
      Type: String
      Value: !GetAtt InventoryServiceEventBus.Arn

  SecretAccessKeyParameter:
    Type: AWS::SSM::Parameter
    Condition: IsNotIntegratedEnvironment
    Properties:
      Name: !Sub /${Env}/${ServiceName}/secret-access-key
      Type: String
      Value: This is a sample secret key that should not be used in production`

  InventoryProductCreatedPublicEventHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./inventory-acl/target/function.zip
      Handler: io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest
      FunctionName: !Sub ${ServiceName}-AclProductCreated-${Env}
      Environment:
        Variables:
          PRODUCT_ADDED_TOPIC_ARN: !Ref NewProductAddedTopic
          QUARKUS_LAMBDA_HANDLER: handleProductCreated
          MAIN_CLASS: com.inventory.acl.FunctionConfiguration
      Events:
        IntegrationQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt InventoryProductCreatedEventQueue.Arn
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecret
        # The Datadog extension sends log data to Datadog using the telemetry API, disabling CloudWatch prevents 'double paying' for logs
        - Version: '2012-10-17'
          Statement:
            - Effect: Deny
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt NewProductAddedTopic.TopicName
    Metadata:
      SkipBuild: true

  InventoryOrderCreatedPublicEventHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./inventory-acl/target/function.zip
      Handler: io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest
      FunctionName: !Sub ${ServiceName}-AclOrderCreated-${Env}
      Environment:
        Variables:
          TABLE_NAME: !Ref InventoryApiTable
          QUARKUS_LAMBDA_HANDLER: handleOrderCreated
          MAIN_CLASS: com.inventory.acl.FunctionConfiguration
          EVENT_BUS_NAME: !If
            - IsIntegratedEnvironment
            - !Sub '{{resolve:ssm:/${Env}/shared/event-bus-name:1}}'
            - !Ref InventoryServiceEventBus
      Events:
        IntegrationQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt InventoryOrderCreatedEventQueue.Arn
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecret
        # The Datadog extension sends log data to Datadog using the telemetry API, disabling CloudWatch prevents 'double paying' for logs
        - Version: '2012-10-17'
          Statement:
            - Effect: Deny
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - DynamoDBCrudPolicy:
            TableName: !Ref InventoryApiTable
        - EventBridgePutEventsPolicy:
            EventBusName: !If
              - IsIntegratedEnvironment
              - !Sub '{{resolve:ssm:/${Env}/shared/event-bus-name:1}}'
              - !Ref InventoryServiceEventBus
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - events:ListEventBuses
              Resource: '*'
    Metadata:
      SkipBuild: true

  InventoryOrderCompletedPublicEventHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./inventory-acl/target/function.zip
      Handler: io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest
      FunctionName: !Sub ${ServiceName}-AclOrderCompleted-${Env}
      Environment:
        Variables:
          TABLE_NAME: !Ref InventoryApiTable
          QUARKUS_LAMBDA_HANDLER: handleOrderCompleted
          MAIN_CLASS: com.inventory.acl.FunctionConfiguration
          EVENT_BUS_NAME: !If
            - IsIntegratedEnvironment
            - !Sub '{{resolve:ssm:/${Env}/shared/event-bus-name:1}}'
            - !Ref InventoryServiceEventBus
      Events:
        IntegrationQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt InventoryOrderCompletedEventQueue.Arn
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecret
        # The Datadog extension sends log data to Datadog using the telemetry API, disabling CloudWatch prevents 'double paying' for logs
        - Version: '2012-10-17'
          Statement:
            - Effect: Deny
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - DynamoDBCrudPolicy:
            TableName: !Ref InventoryApiTable
        - EventBridgePutEventsPolicy:
            EventBusName: !If
              - IsIntegratedEnvironment
              - !Sub '{{resolve:ssm:/${Env}/shared/event-bus-name:1}}'
              - !Ref InventoryServiceEventBus
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - events:ListEventBuses
              Resource: '*'
    Metadata:
      SkipBuild: true

  NewProductAddedTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${ServiceName}-NewProductAdded-${Env}

  InventoryProductCreatedEventDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${ServiceName}-ProductCreatedDLQ-${Env}

  InventoryProductCreatedEventQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${ServiceName}-ProductCreatedQueue-${Env}
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt InventoryProductCreatedEventDLQ.Arn
        maxReceiveCount: 3

  ProductCreatedEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref InventoryServiceEventBus
      Name: inventory-product-created
      State: ENABLED
      EventPattern:
        source:
          - !Sub ${Env}.products
        detail-type:
          - product.productCreated.v1
      Targets:
        - Id: ProductCreatedEventQueue
          Arn: !GetAtt InventoryProductCreatedEventQueue.Arn

  SnsToQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref InventoryProductCreatedEventQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: allow-eb-send-message-messages
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Resource: !GetAtt InventoryProductCreatedEventQueue.Arn
            Action: SQS:SendMessage

  InventoryOrderCreatedEventDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub InventoryOrderCreatedEventDLQ-${Env}

  InventoryOrderCreatedEventQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub InventoryOrderCreatedEventQueue-${Env}
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt InventoryOrderCreatedEventDLQ.Arn
        maxReceiveCount: 3

  OrderCreatedEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref InventoryServiceEventBus
      Name: inventory-order-created
      State: ENABLED
      EventPattern:
        source:
          - !Sub ${Env}.orders
        detail-type:
          - orders.orderCreated.v1
      Targets:
        - Id: OrderCreatedEventQueue
          Arn: !GetAtt InventoryOrderCreatedEventQueue.Arn

  EBToOrderCreatedQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref InventoryOrderCreatedEventQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: allow-eb-send-message-messages
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Resource: !GetAtt InventoryOrderCreatedEventQueue.Arn
            Action: SQS:SendMessage

  InventoryOrderCompletedEventDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub InventoryOrderCompletedEventDLQ-${Env}

  InventoryOrderCompletedEventQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub InventoryOrderCompletedEventQueue-${Env}
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt InventoryOrderCompletedEventDLQ.Arn
        maxReceiveCount: 3

  OrderCompletedEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref InventoryServiceEventBus
      Name: inventory-order-completed
      State: ENABLED
      EventPattern:
        source:
          - !Sub ${Env}.orders
        detail-type:
          - orders.orderCompleted.v1
      Targets:
        - Id: OrderCompletedEventQueue
          Arn: !GetAtt InventoryOrderCompletedEventQueue.Arn

  EBToOrderCompletedQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref InventoryOrderCompletedEventQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: allow-eb-send-message-messages
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Resource: !GetAtt InventoryOrderCompletedEventQueue.Arn
            Action: SQS:SendMessage

  InventoryOrderingWorkflow:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./inventory-ordering-service/target/com.inventory.ordering-1.0.0-SNAPSHOT-aws.jar
      Handler: org.springframework.cloud.function.adapter.aws.FunctionInvoker::handleRequest
      FunctionName: !Sub ${ServiceName}-WorkflowTrigger-${Env}
      Environment:
        Variables:
          ORDERING_SERVICE_WORKFLOW_ARN: !Ref InventoryOrderingService
          spring_cloud_function_definition: handleNewProductAdded
          MAIN_CLASS: com.inventory.ordering.FunctionConfiguration
      Events:
        NewProductAddedTopic:
          Type: SNS
          Properties:
            Topic: !Ref NewProductAddedTopic
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecret
        - StepFunctionsExecutionPolicy:
            StateMachineName: !GetAtt InventoryOrderingService.Name
    Metadata:
      SkipBuild: true

  InventoryOrderingServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 1
      LogGroupName: !Sub /aws/vendedlogs/states/${ServiceName}-InventoryOrderingServiceLogGroup-${Env}

  InventoryOrderingService:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub ${ServiceName}-InventoryOrderingServiceLogGroup-${Env}
      DefinitionSubstitutions:
        TableName: !Ref InventoryApiTable
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogDelivery
                - logs:CreateLogStream
                - logs:GetLogDelivery
                - logs:UpdateLogDelivery
                - logs:DeleteLogDelivery
                - logs:ListLogDeliveries
                - logs:PutLogEvents
                - logs:PutResourcePolicy
                - logs:DescribeResourcePolicies
                - logs:DescribeLogGroups
              Resource: '*'
        - DynamoDBWritePolicy:
            TableName: !Ref InventoryApiTable
      Logging:
        IncludeExecutionData: true
        Level: ALL
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt InventoryOrderingServiceLogGroup.Arn
      Tags:
        DD_ENHANCED_METRICS: 'true'
        DD_TRACE_ENABLED: 'true'
      DefinitionUri: cdk/src/main/java/com/cdk/inventory/ordering/workflows/workflow.setStock.asl.json

  InventoryApiTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub InventoryApi-${Env}
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: PK
          KeyType: HASH

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow incoming HTTP traffic
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80

  MicroServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow incoming HTTP traffic
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          Description: Allow incoming HTTP traffic from ALB
        - CidrIpv6: '::/0'
          IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          Description: Allow incoming HTTP traffic from ALB

  ALBToServiceSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt MicroServiceSecurityGroup.GroupId
      Description: Allow traffic from ALB to service
      SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
      FromPort: 0
      ToPort: 65535
      IpProtocol: tcp

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${ServiceName}-cluster-${Env}

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      TaskDefinition: !Ref ECSTaskDef
      LaunchType: FARGATE
      ServiceName: inventory-api
      SchedulingStrategy: REPLICA
      LoadBalancers:
        - ContainerName: InventoryApi
          ContainerPort: 8080
          TargetGroupArn: !Ref ECSALBTargetGroup
      HealthCheckGracePeriodSeconds: 29
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref MicroServiceSecurityGroup
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
      PlatformVersion: LATEST
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DeploymentController:
        Type: ECS
      ServiceConnectConfiguration:
        Enabled: false
      Tags: []
      EnableECSManagedTags: true
    DependsOn:
      - ALBListener

  ECSALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ServiceName}-tg-${Env}
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      Matcher:
        HttpCode: 200-499
      HealthCheckPath: /health
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      HealthCheckTimeoutSeconds: 30
      HealthCheckIntervalSeconds: 60
      VpcId: !Ref VPC

  ECSALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${ServiceName}-api-${Env}
      Type: application
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ECSALBTargetGroup
      LoadBalancerArn: !Ref ECSALB
      Port: 80
      Protocol: HTTP

  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ecs-service-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
        - PolicyName: cloudwatch-logs-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: '*'
        - PolicyName: allow-secrets-retrieve
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref DDApiKeySecret

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: dynamo-db-crud
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:ConditionCheckItem
                  - dynamodb:DeleteItem
                  - dynamodb:DescribeTable
                  - dynamodb:GetItem
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource: !GetAtt InventoryApiTable.Arn
        - PolicyName: allow-eb-publish
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - events:PutEvents
                  - events:ListEventBuses
                Resource: '*'
        - PolicyName: allow-secrets-retrieve
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref DDApiKeySecret
        - PolicyName: allow-ssm-access-key-retrieve
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:DescribeParameters
                  - ssm:GetParameter
                  - ssm:GetParameterHistory
                  - ssm:GetParameters
                Resource: !If
                  - IsIntegratedEnvironment
                  - !Sub arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/shared/secret-access-key
                  - !Sub arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/${ServiceName}/secret-access-key

  ECSTaskDef:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      Family: inventory-api-definition
      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      RuntimePlatform:
        CpuArchitecture: ARM64
        OperatingSystemFamily: LINUX
      ContainerDefinitions:
        - Name: InventoryApi
          Image: public.ecr.aws/k4y9x2e7/dd-serverless-sample-app-inventory-java:latest
          Environment:
            - Name: TABLE_NAME
              Value: !Ref InventoryApiTable
            - Name: EVENT_BUS_NAME
              Value: !If
                - IsIntegratedEnvironment
                - !Sub '{{resolve:ssm:/${Env}/shared/event-bus-name:1}}'
                - !Ref InventoryServiceEventBus
            - Name: JWT_SECRET_PARAM_NAME
              Value: !If
                - IsIntegratedEnvironment
                - !Sub /${Env}/shared/secret-access-key
                - !Sub /${Env}/${ServiceName}/secret-access-key
            - Name: TEAM
              Value: inventory
            - Name: DOMAIN
              Value: inventory
            - Name: ENV
              Value: !Ref Env
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
              HostPort: 8080
              AppProtocol: http
              Name: inventory-api
          Essential: true
          LogConfiguration:
            LogDriver: awsfirelens
            Options:
              Name: datadog
              Host: !Sub http-intake.logs.${DDSite}
              TLS: 'on'
              dd_service: InventoryManagementService
              dd_source: quarkus
              dd_message_key: log
              provider: ecs
              apikey: !Ref DDApiKey
        - Name: DatadogAgent
          Image: public.ecr.aws/datadog/agent:latest
          Environment:
            - Name: DD_SITE
              Value: !Ref DDSite
            - Name: ECS_FARGATE
              Value: 'true'
            - Name: DD_LOGS_ENABLED
              Value: 'false'
            - Name: DD_PROCESS_AGENT_ENABLED
              Value: 'true'
            - Name: DD_APM_ENABLED
              Value: 'true'
            - Name: DD_APM_NON_LOCAL_TRAFFIC
              Value: 'true'
            - Name: DD_DOGSTATSD_NON_LOCAL_TRAFFIC
              Value: 'true'
            - Name: DD_ECS_TASK_COLLECTION_ENABLED
              Value: 'true'
            - Name: DD_ENV
              Value: !Ref Env
            - Name: DD_SERVICE
              Value: !Ref ServiceName
            - Name: DD_VERSION
              Value: !Ref CommitHash
            - Name: DD_APM_IGNORE_RESOURCES
              Value: GET /
          Secrets:
            - Name: DD_API_KEY
              ValueFrom: !Ref DDApiKeySecret
          PortMappings:
            - ContainerPort: 8125
              HostPort: 8125
            - ContainerPort: 8126
              HostPort: 8126
          Essential: true
        - Name: LogRouter
          Image: amazon/aws-for-fluent-bit:latest
          Essential: true
          FirelensConfiguration:
            Type: fluentbit
            Options:
              enable-ecs-log-metadata: 'true'

  InventoryServiceEventBusToSharedEventBusRole:
    Type: AWS::IAM::Role
    Condition: IsIntegratedEnvironment
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: allow-eb-publish
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - events:PutEvents
                Resource:
                  - !GetAtt InventoryServiceEventBus.Arn

  SharedEventBusProductCreatedEventRule:
    Type: AWS::Events::Rule
    Condition: IsIntegratedEnvironment
    Properties:
      EventBusName: !Sub '{{resolve:ssm:/${Env}/shared/event-bus-name:1}}'
      Name: inventory-product-created
      State: ENABLED
      EventPattern:
        source:
          - !Sub ${Env}.products
        detail-type:
          - product.productCreated.v1
      Targets:
        - Id: ProductCreatedEventQueue
          Arn: !GetAtt InventoryServiceEventBus.Arn
          RoleArn: !GetAtt InventoryServiceEventBusToSharedEventBusRole.Arn

  SharedEventBusOrderCreatedEventRule:
    Type: AWS::Events::Rule
    Condition: IsIntegratedEnvironment
    Properties:
      EventBusName: !Sub '{{resolve:ssm:/${Env}/shared/event-bus-name:1}}'
      Name: inventory-order-created
      State: ENABLED
      EventPattern:
        source:
          - !Sub ${Env}.orders
        detail-type:
          - orders.orderCreated.v1
      Targets:
        - Id: OrderCreatedEventQueue
          Arn: !GetAtt InventoryServiceEventBus.Arn
          RoleArn: !GetAtt InventoryServiceEventBusToSharedEventBusRole.Arn

  SharedEventBusOrderCompletedEventRule:
    Type: AWS::Events::Rule
    Condition: IsIntegratedEnvironment
    Properties:
      EventBusName: !Sub '{{resolve:ssm:/${Env}/shared/event-bus-name:1}}'
      Name: inventory-order-completed
      State: ENABLED
      EventPattern:
        source:
          - !Sub ${Env}.orders
        detail-type:
          - orders.orderCompleted.v1
      Targets:
        - Id: InventoryEventBus
          Arn: !GetAtt InventoryServiceEventBus.Arn
          RoleArn: !GetAtt InventoryServiceEventBusToSharedEventBusRole.Arn

  InventoryApiEndpoint:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${Env}/${ServiceName}/api-endpoint
      Type: String
      Value: !Sub http://${ECSALB.DNSName}