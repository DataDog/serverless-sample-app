#
# Unless explicitly stated otherwise all files in this repository are licensed
# under the Apache License Version 2.0.
# This product includes software developed at Datadog (https://www.datadoghq.com/).
# Copyright 2024 Datadog, Inc.
#

AWSTemplateFormatVersion: "2010-09-09"
Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  ServiceName:
    Type: String
    Default: Users
  Env:
    Type: String
    Default: local
  CommitHash:
    Type: String
    Default: latest
  DDSite:
    Type: String
  DDApiKey:
    Type: String

Globals:
  Function:
    Runtime: provided.al2023
    Timeout: 29
    MemorySize: 512
    Layers:
      - !Sub arn:aws:lambda:${AWS::Region}:464622532012:layer:Datadog-Extension:85
    Environment:
      Variables:
        ENV: !Ref Env
        DD_ENV: !Ref Env
        DD_API_KEY: !Ref DDApiKey
        DD_SITE: !Ref DDSite
        DD_VERSION: !Ref CommitHash
        DD_SERVICE: !Ref ServiceName
        TABLE_NAME: !Ref UserTable
        RUST_LOG: "info"
        DD_DATA_STREAMS_ENABLED: "true"
    Architectures:
      - x86_64
  HttpApi:
    CorsConfiguration:
      AllowOrigins:
        - "*"
      AllowHeaders:
        - "*"
      AllowMethods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS

Conditions:
  IsIntegratedEnvironment: !Or
    - !Equals ["dev", !Ref Env]
    - !Equals ["prod", !Ref Env]
  IsNotIntegratedEnvironment: !And
    - !Not [!Equals [!Ref Env, prod]]
    - !Not [!Equals [!Ref Env, dev]]

Resources:
  DDApiKeySecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: !Sub "/${Env}/${ServiceName}/datadog-api-key"
      Description: "The Datadog API key"
      SecretString: !Ref DDApiKey

  UserManagementEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub "${ServiceName}-Bus-${Env}"

  UserBusNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${Env}/${ServiceName}/event-bus-name
      Type: String
      Value: !Ref UserManagementEventBus

  UserBusArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${Env}/${ServiceName}/event-bus-arn
      Type: String
      Value: !GetAtt UserManagementEventBus.Arn

  UsersSecretAccessKeyParameter:
    Type: AWS::SSM::Parameter
    Condition: IsNotIntegratedEnvironment
    Properties:
      Name: !Sub /${Env}/${ServiceName}/secret-access-key
      Type: String
      Value: "This is a sample secret key that should not be used in production`"

  CreateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./out/registerUserFunction/registerUserFunction.zip
      Handler: bootstrap
      FunctionName: !Sub SAM-${ServiceName}-CreateUser-${Env}
      Environment:
        Variables:
          EVENT_BUS_NAME: !If
            - IsIntegratedEnvironment
            - !Sub "{{resolve:ssm:/${Env}/shared/event-bus-name:1}}"
            - !Ref UserManagementEventBus
      Events:
        CreateUser:
          Type: HttpApi
          Properties:
            Path: /user
            Method: post
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
              Resource: !GetAtt UserTable.Arn
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecret
        # The Datadog extension sends log data to Datadog using the telemetry API, disabling CloudWatch prevents 'double paying' for logs
        - Version: "2012-10-17"
          Statement:
            - Effect: Deny
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - EventBridgePutEventsPolicy:
            EventBusName: !If
              - IsIntegratedEnvironment
              - !Sub "{{resolve:ssm:/${Env}/shared/event-bus-name:1}}"
              - !Ref UserManagementEventBus

  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./out/loginFunction/loginFunction.zip
      Handler: bootstrap
      FunctionName: !Sub SAM-${ServiceName}-Login-${Env}
      Environment:
        Variables:
          JWT_SECRET_PARAM_NAME: !If
            - IsIntegratedEnvironment
            - !Sub /${Env}/shared/secret-access-key
            - !Sub /${Env}/${ServiceName}/secret-access-key
          TOKEN_EXPIRATION: 86400 # 1 day in seconds
      Events:
        Login:
          Type: HttpApi
          Properties:
            Path: /login
            Method: post
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
              Resource: !GetAtt UserTable.Arn
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecret
        # The Datadog extension sends log data to Datadog using the telemetry API, disabling CloudWatch prevents 'double paying' for logs
        - Version: "2012-10-17"
          Statement:
            - Effect: Deny
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "ssm:DescribeParameters"
                - "ssm:GetParameter"
                - "ssm:GetParameterHistory"
                - "ssm:GetParameters"
              Resource: !If
                - IsIntegratedEnvironment
                - !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/shared/secret-access-key"
                - !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/${ServiceName}/secret-access-key"

  GetUserDetailsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./out/getUserDetailsFunction/getUserDetailsFunction.zip
      Handler: bootstrap
      FunctionName: !Sub SAM-${ServiceName}-GetUserDetails-${Env}
      Environment:
        Variables:
          JWT_SECRET_PARAM_NAME: !If
            - IsIntegratedEnvironment
            - !Sub /${Env}/shared/secret-access-key
            - !Sub /${Env}/${ServiceName}/secret-access-key
          TOKEN_EXPIRATION: 86400 # 1 day in seconds
      Events:
        GetUserDetails:
          Type: HttpApi
          Properties:
            Path: /user/{userId}
            Method: get
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
              Resource: !GetAtt UserTable.Arn
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecret
        # The Datadog extension sends log data to Datadog using the telemetry API, disabling CloudWatch prevents 'double paying' for logs
        - Version: "2012-10-17"
          Statement:
            - Effect: Deny
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "ssm:DescribeParameters"
                - "ssm:GetParameter"
                - "ssm:GetParameterHistory"
                - "ssm:GetParameters"
              Resource: !If
                - IsIntegratedEnvironment
                - !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/shared/secret-access-key"
                - !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/${ServiceName}/secret-access-key"

  ################################################
  ############### OAuth Endpoints ################
  ################################################

  OAuthMetadataFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./out/oauthMetadataFunction/oauthMetadataFunction.zip
      Handler: bootstrap
      FunctionName: !Sub SAM-${ServiceName}-OAuthMetadata-${Env}
      Environment:
        Variables:
          JWT_SECRET_PARAM_NAME: !If
            - IsIntegratedEnvironment
            - !Sub /${Env}/shared/secret-access-key
            - !Sub /${Env}/${ServiceName}/secret-access-key
      Events:
        OAuthMetadata:
          Type: HttpApi
          Properties:
            Path: /.well-known/oauth-authorization-server
            Method: get
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
              Resource: !GetAtt UserTable.Arn
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecret
        - Version: "2012-10-17"
          Statement:
            - Effect: Deny
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "ssm:DescribeParameters"
                - "ssm:GetParameter"
                - "ssm:GetParameterHistory"
                - "ssm:GetParameters"
              Resource: !If
                - IsIntegratedEnvironment
                - !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/shared/secret-access-key"
                - !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/${ServiceName}/secret-access-key"

  OAuthAuthorizeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./out/oauthAuthorizeFunction/oauthAuthorizeFunction.zip
      Handler: bootstrap
      FunctionName: !Sub SAM-${ServiceName}-OAuthAuthorize-${Env}
      Environment:
        Variables:
          JWT_SECRET_PARAM_NAME: !If
            - IsIntegratedEnvironment
            - !Sub /${Env}/shared/secret-access-key
            - !Sub /${Env}/${ServiceName}/secret-access-key
      Events:
        OAuthAuthorizeGet:
          Type: HttpApi
          Properties:
            Path: /oauth/authorize
            Method: get
        OAuthAuthorizePost:
          Type: HttpApi
          Properties:
            Path: /oauth/authorize
            Method: post
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:UpdateItem
              Resource: !GetAtt UserTable.Arn
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecret
        - Version: "2012-10-17"
          Statement:
            - Effect: Deny
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "ssm:DescribeParameters"
                - "ssm:GetParameter"
                - "ssm:GetParameterHistory"
                - "ssm:GetParameters"
              Resource: !If
                - IsIntegratedEnvironment
                - !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/shared/secret-access-key"
                - !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/${ServiceName}/secret-access-key"

  OAuthAuthorizeCallbackFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./out/oauthAuthorizeCallbackFunction/oauthAuthorizeCallbackFunction.zip
      Handler: bootstrap
      FunctionName: !Sub SAM-${ServiceName}-OAuthAuthorizeCallback-${Env}
      Environment:
        Variables:
          JWT_SECRET_PARAM_NAME: !If
            - IsIntegratedEnvironment
            - !Sub /${Env}/shared/secret-access-key
            - !Sub /${Env}/${ServiceName}/secret-access-key
      Events:
        OAuthAuthorizeCallbackGet:
          Type: HttpApi
          Properties:
            Path: /oauth/authorize/callback
            Method: get
        OAuthAuthorizeCallbackPost:
          Type: HttpApi
          Properties:
            Path: /oauth/authorize/callback
            Method: post
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:UpdateItem
              Resource: !GetAtt UserTable.Arn
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecret
        - Version: "2012-10-17"
          Statement:
            - Effect: Deny
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "ssm:DescribeParameters"
                - "ssm:GetParameter"
                - "ssm:GetParameterHistory"
                - "ssm:GetParameters"
              Resource: !If
                - IsIntegratedEnvironment
                - !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/shared/secret-access-key"
                - !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/${ServiceName}/secret-access-key"

  OAuthTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./out/oauthTokenFunction/oauthTokenFunction.zip
      Handler: bootstrap
      FunctionName: !Sub SAM-${ServiceName}-OAuthToken-${Env}
      Environment:
        Variables:
          JWT_SECRET_PARAM_NAME: !If
            - IsIntegratedEnvironment
            - !Sub /${Env}/shared/secret-access-key
            - !Sub /${Env}/${ServiceName}/secret-access-key
      Events:
        OAuthToken:
          Type: HttpApi
          Properties:
            Path: /oauth/token
            Method: post
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
              Resource: !GetAtt UserTable.Arn
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecret
        - Version: "2012-10-17"
          Statement:
            - Effect: Deny
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "ssm:DescribeParameters"
                - "ssm:GetParameter"
                - "ssm:GetParameterHistory"
                - "ssm:GetParameters"
              Resource: !If
                - IsIntegratedEnvironment
                - !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/shared/secret-access-key"
                - !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/${ServiceName}/secret-access-key"

  OAuthIntrospectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./out/oauthIntrospectFunction/oauthIntrospectFunction.zip
      Handler: bootstrap
      FunctionName: !Sub SAM-${ServiceName}-OAuthIntrospect-${Env}
      Environment:
        Variables:
          JWT_SECRET_PARAM_NAME: !If
            - IsIntegratedEnvironment
            - !Sub /${Env}/shared/secret-access-key
            - !Sub /${Env}/${ServiceName}/secret-access-key
      Events:
        OAuthIntrospect:
          Type: HttpApi
          Properties:
            Path: /oauth/introspect
            Method: post
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
              Resource: !GetAtt UserTable.Arn
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecret
        - Version: "2012-10-17"
          Statement:
            - Effect: Deny
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "ssm:DescribeParameters"
                - "ssm:GetParameter"
                - "ssm:GetParameterHistory"
                - "ssm:GetParameters"
              Resource: !If
                - IsIntegratedEnvironment
                - !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/shared/secret-access-key"
                - !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/${ServiceName}/secret-access-key"

  OAuthRevokeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./out/oauthRevokeFunction/oauthRevokeFunction.zip
      Handler: bootstrap
      FunctionName: !Sub SAM-${ServiceName}-OAuthRevoke-${Env}
      Environment:
        Variables:
          JWT_SECRET_PARAM_NAME: !If
            - IsIntegratedEnvironment
            - !Sub /${Env}/shared/secret-access-key
            - !Sub /${Env}/${ServiceName}/secret-access-key
      Events:
        OAuthRevoke:
          Type: HttpApi
          Properties:
            Path: /oauth/revoke
            Method: post
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
              Resource: !GetAtt UserTable.Arn
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecret
        - Version: "2012-10-17"
          Statement:
            - Effect: Deny
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "ssm:DescribeParameters"
                - "ssm:GetParameter"
                - "ssm:GetParameterHistory"
                - "ssm:GetParameters"
              Resource: !If
                - IsIntegratedEnvironment
                - !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/shared/secret-access-key"
                - !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/${ServiceName}/secret-access-key"

  OAuthDcrFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./out/oauthDcrFunction/oauthDcrFunction.zip
      Handler: bootstrap
      FunctionName: !Sub SAM-${ServiceName}-OAuthDcr-${Env}
      Environment:
        Variables:
          JWT_SECRET_PARAM_NAME: !If
            - IsIntegratedEnvironment
            - !Sub /${Env}/shared/secret-access-key
            - !Sub /${Env}/${ServiceName}/secret-access-key
      Events:
        OAuthDcrClient:
          Type: HttpApi
          Properties:
            Path: /oauth/client
            Method: post
        OAuthDcrRegister:
          Type: HttpApi
          Properties:
            Path: /oauth/register
            Method: post
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:UpdateItem
              Resource: !GetAtt UserTable.Arn
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecret
        - Version: "2012-10-17"
          Statement:
            - Effect: Deny
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "ssm:DescribeParameters"
                - "ssm:GetParameter"
                - "ssm:GetParameterHistory"
                - "ssm:GetParameters"
              Resource: !If
                - IsIntegratedEnvironment
                - !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/shared/secret-access-key"
                - !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/${ServiceName}/secret-access-key"

  OAuthClientGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./out/oauthClientGetFunction/oauthClientGetFunction.zip
      Handler: bootstrap
      FunctionName: !Sub SAM-${ServiceName}-OAuthClientGet-${Env}
      Environment:
        Variables:
          JWT_SECRET_PARAM_NAME: !If
            - IsIntegratedEnvironment
            - !Sub /${Env}/shared/secret-access-key
            - !Sub /${Env}/${ServiceName}/secret-access-key
      Events:
        OAuthClientGet:
          Type: HttpApi
          Properties:
            Path: /oauth/client/{clientId}
            Method: get
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
              Resource: !GetAtt UserTable.Arn
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecret
        - Version: "2012-10-17"
          Statement:
            - Effect: Deny
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "ssm:DescribeParameters"
                - "ssm:GetParameter"
                - "ssm:GetParameterHistory"
                - "ssm:GetParameters"
              Resource: !If
                - IsIntegratedEnvironment
                - !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/shared/secret-access-key"
                - !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/${ServiceName}/secret-access-key"

  OAuthClientUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./out/oauthClientUpdateFunction/oauthClientUpdateFunction.zip
      Handler: bootstrap
      FunctionName: !Sub SAM-${ServiceName}-OAuthClientUpdate-${Env}
      Environment:
        Variables:
          JWT_SECRET_PARAM_NAME: !If
            - IsIntegratedEnvironment
            - !Sub /${Env}/shared/secret-access-key
            - !Sub /${Env}/${ServiceName}/secret-access-key
      Events:
        OAuthClientUpdate:
          Type: HttpApi
          Properties:
            Path: /oauth/client/{clientId}
            Method: put
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:UpdateItem
              Resource: !GetAtt UserTable.Arn
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecret
        - Version: "2012-10-17"
          Statement:
            - Effect: Deny
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "ssm:DescribeParameters"
                - "ssm:GetParameter"
                - "ssm:GetParameterHistory"
                - "ssm:GetParameters"
              Resource: !If
                - IsIntegratedEnvironment
                - !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/shared/secret-access-key"
                - !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/${ServiceName}/secret-access-key"

  OAuthClientDeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./out/oauthClientDeleteFunction/oauthClientDeleteFunction.zip
      Handler: bootstrap
      FunctionName: !Sub SAM-${ServiceName}-OAuthClientDelete-${Env}
      Environment:
        Variables:
          JWT_SECRET_PARAM_NAME: !If
            - IsIntegratedEnvironment
            - !Sub /${Env}/shared/secret-access-key
            - !Sub /${Env}/${ServiceName}/secret-access-key
      Events:
        OAuthClientDelete:
          Type: HttpApi
          Properties:
            Path: /oauth/client/{clientId}
            Method: delete
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
              Resource: !GetAtt UserTable.Arn
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecret
        - Version: "2012-10-17"
          Statement:
            - Effect: Deny
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "ssm:DescribeParameters"
                - "ssm:GetParameter"
                - "ssm:GetParameterHistory"
                - "ssm:GetParameters"
              Resource: !If
                - IsIntegratedEnvironment
                - !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/shared/secret-access-key"
                - !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/${ServiceName}/secret-access-key"

  ################################################
  ############# Background Workers ###############
  ################################################

  OrderCompletedFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./out/handleOrderCompletedFunction/handleOrderCompletedFunction.zip
      Handler: bootstrap
      FunctionName: !Sub ${ServiceName}-OrderCompleted-${Env}
      Environment:
        Variables:
          USE_SPAN_LINK: "true"
      Events:
        IntegrationQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt OrderCompletedQueue.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecret

  OrderCompletedDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${ServiceName}-OrderCompletedDLQ-${Env}"

  OrderCompletedQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${ServiceName}-OrderCompletedQueue-${Env}"
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - "OrderCompletedDLQ"
            - "Arn"
        maxReceiveCount: 3

  OrderCompletedEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref UserManagementEventBus
      Name: user-service-order-completed
      State: ENABLED
      EventPattern:
        source:
          - !Sub "${Env}.orders"
        detail-type:
          - "orders.orderCompleted.v1"
      Targets:
        - Id: OrderCompletedQueue
          Arn: !GetAtt OrderCompletedQueue.Arn

  SnsToQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref OrderCompletedQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: allow-eb-send-message-messages
            Effect: Allow
            Principal:
              Service: "events.amazonaws.com"
            Resource: !GetAtt OrderCompletedQueue.Arn
            Action: SQS:SendMessage

  ################################################
  ######## Public Event Subscriptions ############
  ################################################
  SharedEventBusToUserManagementEventBusRole:
    Type: AWS::IAM::Role
    Condition: IsIntegratedEnvironment
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: allow-eb-publish
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "events:PutEvents"
                Resource: [!GetAtt UserManagementEventBus.Arn]

  SharedEventBusOrderCompletedEventRule:
    Type: AWS::Events::Rule
    Condition: IsIntegratedEnvironment
    Properties:
      EventBusName: !Sub "{{resolve:ssm:/${Env}/shared/event-bus-name:1}}"
      Name: shared-users-order-completed
      State: ENABLED
      EventPattern:
        source:
          - !Sub "${Env}.orders"
        detail-type:
          - "orders.orderCompleted.v1"
      Targets:
        - Id: UserManagementEventBus
          Arn: !GetAtt UserManagementEventBus.Arn
          RoleArn: !GetAtt SharedEventBusToUserManagementEventBusRole.Arn

  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${ServiceName}-Users-${Env}
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE

  ApiEndpoint:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${Env}/${ServiceName}/api-endpoint
      Type: String
      Value: !Sub "https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/"

Outputs:
  RustProductApiEndpoint:
    Description: User API Endpoint
    Value: !Sub "https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/"
    Export:
      Name: UserApiEndpoint
