#
# Unless explicitly stated otherwise all files in this repository are licensed
# under the Apache License Version 2.0.
# This product includes software developed at Datadog (https://www.datadoghq.com/).
# Copyright 2024 Datadog, Inc.
#

AWSTemplateFormatVersion : '2010-09-09'
Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  ServiceName:
    Type: String
    Default: UserManagementService
  Env:
    Type: String
    Default: local
  CommitHash:
    Type: String
    Default: latest
  DDApiKeySecretArn:
    Type: String
  DDSite:
    Type: String

Globals:
  Function:
    Runtime: provided.al2023
    Timeout: 29
    MemorySize: 512
    Layers:
      - !Sub arn:aws:lambda:${AWS::Region}:464622532012:layer:Datadog-Extension:71
    Environment:
      Variables:
        ENV: !Ref Env
        DD_ENV: !Ref Env
        DD_API_KEY_SECRET_ARN: !Ref DDApiKeySecretArn
        DD_SITE: !Ref DDSite
        DD_VERSION: !Ref CommitHash
        DD_SERVICE: !Ref ServiceName
        TABLE_NAME: !Ref UserTable
        RUST_LOG: "info"
    Architectures:
      - x86_64
  Api:
    Cors:
      AllowMethods: "'POST, GET, PUT, DELETE'"
      AllowHeaders: "'*'"
      AllowOrigin: "'http://localhost:8080'"

Resources:
  CreateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/user-management/lambdas/create_user/
      Handler: create-user
      FunctionName: !Sub SAM-${ServiceName}-CreateUser-${Env}
      Environment:
        Variables:
          USER_CREATED_TOPIC_ARN: !Ref UserCreatedTopic
      Events:
        GetProduct:
          Type: Api
          Properties:
            Path: /user
            Method: post
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
              Resource: !GetAtt UserTable.Arn
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecretArn
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt UserCreatedTopic.TopicName
    Metadata:
      BuildMethod: rust-cargolambda
      Binary: create-user

  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/user-management/lambdas/login/
      Handler: login
      FunctionName: !Sub SAM-${ServiceName}-Login-${Env}
      Environment:
        Variables:
          JWT_SECRET_PARAM_NAME: !Sub "/${Env}/shared/secret-access-key"
          TOKEN_EXPIRATION: 86400 # 1 day in seconds
      Events:
        GetProduct:
          Type: Api
          Properties:
            Path: /login
            Method: post
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
              Resource: !GetAtt UserTable.Arn
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecretArn
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "ssm:DescribeParameters"
                - "ssm:GetParameter"
                - "ssm:GetParameterHistory"
                - "ssm:GetParameters"
              Resource: !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/shared/secret-access-key"
    Metadata:
      BuildMethod: rust-cargolambda
      Binary: login

  GetUserDetailsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/user-management/lambdas/get_user_details/
      Handler: bootstrap
      FunctionName: !Sub SAM-${ServiceName}-GetUserDetails-${Env}
      Environment:
        Variables:
          JWT_SECRET_PARAM_NAME: !Sub "/${Env}/shared/secret-access-key"
          TOKEN_EXPIRATION: 86400 # 1 day in seconds
      Events:
        GetProduct:
          Type: Api
          Properties:
            Path: /user/{userId}
            Method: get
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
              Resource: !GetAtt UserTable.Arn
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecretArn
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "ssm:DescribeParameters"
                - "ssm:GetParameter"
                - "ssm:GetParameterHistory"
                - "ssm:GetParameters"
              Resource: !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/${Env}/shared/secret-access-key"
    Metadata:
      BuildMethod: rust-cargolambda
      Binary: get-user-details

  OrderCompletedFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/user-management/lambdas/handle_order_completed_for_user/
      Handler: handle-order-completed
      FunctionName: !Sub SAM-RustOrderCompleted-${Env}
      Events:
        IntegrationQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt OrderCompletedQueue.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref DDApiKeySecretArn
    Metadata:
      BuildMethod: rust-cargolambda
      Binary: handle-order-completed

  OrderCompletedDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${ServiceName}-OrderCompletedDLQ-${Env}"

  OrderCompletedQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${ServiceName}-OrderCompletedQueue-${Env}"
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - "OrderCompletedDLQ"
            - "Arn"
        maxReceiveCount: 3

  OrderCompletedEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Sub "{{resolve:ssm:/${Env}/shared/event-bus-name:1}}"
      Name: user-service-order-completed
      State: ENABLED
      EventPattern:
        source:
          - !Sub "${Env}.orders"
        detail-type:
          - "orders.orderCompleted.v1"
      Targets:
        - Id: OrderCompletedQueue
          Arn: !GetAtt OrderCompletedQueue.Arn

  SnsToQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties: 
      Queues:
        - !Ref OrderCompletedQueue
      PolicyDocument: 
        Version: '2012-10-17'
        Statement:
          - Sid: allow-eb-send-message-messages
            Effect: Allow
            Principal:
              Service: "events.amazonaws.com"
            Resource: !GetAtt OrderCompletedQueue.Arn
            Action: SQS:SendMessage
  
  UserCreatedTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${ServiceName}-UserCreated-${Env}"

  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${ServiceName}-Users-${Env}
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: PK
          KeyType: HASH

  ApiEndpoint:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${Env}/${ServiceName}/api-endpoint
      Type: String
      Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"

Outputs:
  RustProductApiEndpoint:
    Description: User API Endpoint
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
    Export:
      Name: UserApiEndpoint