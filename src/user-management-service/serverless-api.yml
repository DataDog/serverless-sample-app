#
# Unless explicitly stated otherwise all files in this repository are licensed
# under the Apache License Version 2.0.
# This product includes software developed at Datadog (https://www.datadoghq.com/).
# Copyright 2024 Datadog, Inc.
#

service: serverless-user-management
frameworkVersion: "3"

plugins:
  - serverless-plugin-datadog

custom:
  serviceName: UserManagementService
  datadog:
    apiKeySecretArn: ${param:DD_API_KEY_SECRET_ARN}
    site: ${param:DD_SITE}
    env: ${sls:stage}
    service: ${self:custom.serviceName}
    version: latest
    # Use this property with care in production to ensure PII/Sensitive data is not stored in Datadog
    captureLambdaPayload: true
    propagateUpstreamTrace: true

provider:
  name: aws
  runtime: provided.al2023
  memorySize: 128
  environment:
    TABLE_NAME: ${self:service}-${sls:stage}
    DD_EXTENSION_VERSION: "next"
    RUST_LOG: "info"
    ENV: ${sls:stage}
    POWERTOOLS_SERVICE_NAME: ${self:custom.serviceName}
    POWERTOOLS_LOG_LEVEL: 'INFO'
  httpApi:
    cors: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.TABLE_NAME}"
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource: ${param:DD_API_KEY_SECRET_ARN}

functions:
  register_user:
    handler: bootstrap
    package:
      artifact: ./out/registerUserFunction/registerUserFunction.zip
      individually: true
    environment:
      TOKEN_SECRET_KEY: This is a sample secret key - please don't use in production environment.'
      TOKEN_EXPIRATION: 86400 # 1 day in seconds
    events:
      - httpApi:
          path: /user
          method: post
  login:
    handler: bootstrap
    package:
      artifact: ./out/loginFunction/loginFunction.zip
      individually: true
    events:
      - httpApi:
          path: /user/login
          method: post

  handle_order_completed_event:
    handler: bootstrap
    package:
      artifact: ./out/handleOrderCompletedFunction/handleOrderCompletedFunction.zip
      individually: true
    events:
      - sqs:
          arn:
            Fn::GetAtt: [OrderCompletedQueue, Arn]

resources:
  Resources:
    OrderCompletedDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: !Sub "${self:custom.serviceName}-OrderCompletedDLQ-${sls:stage}"

    OrderCompletedQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: !Sub "${self:custom.serviceName}-OrderCompletedQueue-${sls:stage}"
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - "OrderCompletedDLQ"
              - "Arn"
          maxReceiveCount: 3

    OrderCompletedEventRule:
      Type: AWS::Events::Rule
      Properties:
        EventBusName: !Sub "{{resolve:ssm:/${sls:stage}/shared/event-bus-name:1}}"
        Name: user-service-order-completed
        State: ENABLED
        EventPattern:
          source:
            - !Sub "${sls:stage}.orders"
          detail-type:
            - "orders.orderCompleted.v1"
        Targets:
          - Id: OrderCompletedQueue
            Arn: !GetAtt OrderCompletedQueue.Arn

    SnsToQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties: 
        Queues:
          - !Ref OrderCompletedQueue
        PolicyDocument: 
          Version: '2012-10-17'
          Statement:
            - Sid: allow-eb-send-message-messages
              Effect: Allow
              Principal:
                Service: "events.amazonaws.com"
              Resource: !GetAtt OrderCompletedQueue.Arn
              Action: SQS:SendMessage
    
    UserCreatedTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: !Sub "${self:custom.serviceName}-UserCreated-${sls:stage}"

    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: !Sub ${self:custom.serviceName}-Users-${sls:stage}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: PK
            KeyType: HASH

    ApiEndpoint:
      Type: AWS::SSM::Parameter
      Properties:
        Name: !Sub /${sls:stage}/${self:custom.serviceName}/api-endpoint
        Type: String
        Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"